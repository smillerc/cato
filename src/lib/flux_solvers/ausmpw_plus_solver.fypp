! MIT License
! Copyright (c) 2020 Sam Miller
! Permission is hereby granted, free of charge, to any person obtaining a copy
! of this software and associated documentation files (the "Software"), to deal
! in the Software without restriction, including without limitation the rights
! to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
! copies of the Software, and to permit persons to whom the Software is
! furnished to do so, subject to the following conditions:
!
! The above copyright notice and this permission notice shall be included in all
! copies or substantial portions of the Software.
!
! THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
! IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
! FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
! AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
! LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
! OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
! SOFTWARE.

! Fypp variables. This allows us to generate an edge flux subroutine for each direction
! and still allow the compiler to optimize
#:set DIRECTIONS = ['i', 'j']

#ifdef __SIMD_ALIGN_OMP__
#define __INTERP_ALIGN__ aligned(rho_edge, u_edge, v_edge, p_edge, edge_flux:__ALIGNBYTES__)
#else
#define __INTERP_ALIGN__
#endif

module mod_ausmpw_plus_solver
  !< Summary: Provide a solver based on the AUSMPW+ family of schemes
  !< Date: 07/15/2020
  !< Author: Sam Miller
  !< Notes:
  !< References:
  !<     [1] K.H. Kim, C. Kim, O.H. Rho, "Methods for the Accurate Computations of Hypersonic Flows I. AUSMPW+ Scheme",
  !<         Journal of Computational Physics 174, (2001) 38â€“80, https://doi.org/10.1006/jcph.2001.6873
  !<     [2] Chen, S., Yan, C., Lin, B., & Li, E., "An improved low-dissipation AUSMPW+ scheme for low MACH number.",
  !<        (2017) 8th International Conference on Mechanical and Aerospace Engineering (ICMAE), 522-526., https://doi.org/10.1109/ICMAE.2017.8038701

  use, intrinsic :: iso_fortran_env, only: ik => int32, rk => real64, std_err => error_unit
  use mod_error, only: error_msg
  use mod_globals, only: debug_print, LOW_MACH, n_ghost_layers
  use mod_floating_point_utils, only: neumaier_sum_4
  use mod_boundary_conditions, only: boundary_condition_t
  use mod_muscl_interpolator_factory, only: muscl_interpolator_factory
  use mod_muscl_interpolation, only: muscl_interpolation_t
  use mod_flux_solver, only: edge_split_flux_solver_t
  use mod_eos, only: eos
  use mod_grid, only: grid_t
  use mod_input, only: input_t

  implicit none

  private
  public :: ausmpw_plus_solver_t

  real(rk), parameter :: beta = 3.0_rk / 16.0_rk !< beta factor in Mach splitting function
  real(rk), parameter :: alpha = 1.0_rk / 8.0_rk !< alpha factor in Pressure splitting function

  type, extends(edge_split_flux_solver_t) :: ausmpw_plus_solver_t
    !< Implementation of the AUSMPW+ scheme
    private
    real(rk) :: gamma = 0.0_rk
    logical :: apply_low_mach_fix = .false.
  contains
    ! Public methods
    procedure, public :: initialize => initialize_ausmpw_plus
    procedure, public :: solve => solve_ausmpw_plus
    procedure, public, pass(lhs) :: copy => copy_ausmpw_plus
    ! procedure, public :: flux_split_edges
    ! Private methods
    #:for DIR in DIRECTIONS
    procedure, private :: get_${DIR}$flux
    #:endfor
    final :: finalize

    ! Operators
    generic :: assignment(=) => copy
  end type ausmpw_plus_solver_t
contains
  subroutine initialize_ausmpw_plus(self, input)
    !< Constructor for the AUSMPW+ solver
    class(ausmpw_plus_solver_t), intent(inout) :: self
    class(input_t), intent(in) :: input

    self%input = input
    self%gamma = eos%get_gamma()
    self%name = 'AUSMPW+_'//input%limiter
    self%apply_low_mach_fix = input%apply_low_mach_fix
  end subroutine initialize_ausmpw_plus

  subroutine copy_ausmpw_plus(lhs, rhs)
    !< Implement LHS = RHS
    class(ausmpw_plus_solver_t), intent(inout) :: lhs
    type(ausmpw_plus_solver_t), intent(in) :: rhs

    call debug_print('Running copy_ausmpw_plus%copy()', __FILE__, __LINE__)

    lhs%iteration = rhs%iteration
    lhs%time = rhs%time
    lhs%dt = rhs%dt
    lhs%gamma = rhs%gamma

  end subroutine copy_ausmpw_plus

  subroutine solve_ausmpw_plus(self, dt, grid, rho, u, v, p, d_rho_dt, d_rho_u_dt, d_rho_v_dt, d_rho_E_dt)
    !< Solve and flux the edges
    class(ausmpw_plus_solver_t), intent(inout) :: self
    class(grid_t), intent(in) :: grid
    real(rk), intent(in) :: dt !< timestep (not really used in this solver, but needed for others)
    real(rk), dimension(grid%ilo_bc_cell:, grid%jlo_bc_cell:), codimension[*], intent(inout) :: rho !< density
    real(rk), dimension(grid%ilo_bc_cell:, grid%jlo_bc_cell:), codimension[*], intent(inout) :: u   !< x-velocity
    real(rk), dimension(grid%ilo_bc_cell:, grid%jlo_bc_cell:), codimension[*], intent(inout) :: v   !< y-velocity
    real(rk), dimension(grid%ilo_bc_cell:, grid%jlo_bc_cell:), codimension[*], intent(inout) :: p   !< pressure
    real(rk), dimension(grid%ilo_bc_cell:, grid%jlo_bc_cell:), codimension[*], intent(inout) ::   d_rho_dt !< d/dt of the density field
    real(rk), dimension(grid%ilo_bc_cell:, grid%jlo_bc_cell:), codimension[*], intent(inout) :: d_rho_u_dt !< d/dt of the rhou field
    real(rk), dimension(grid%ilo_bc_cell:, grid%jlo_bc_cell:), codimension[*], intent(inout) :: d_rho_v_dt !< d/dt of the rhov field
    real(rk), dimension(grid%ilo_bc_cell:, grid%jlo_bc_cell:), codimension[*], intent(inout) :: d_rho_E_dt !< d/dt of the rhoE field

    class(muscl_interpolation_t), pointer :: edge_interpolator => null()
    class(boundary_condition_t), allocatable:: bc_plus_x
    class(boundary_condition_t), allocatable:: bc_plus_y
    class(boundary_condition_t), allocatable:: bc_minus_x
    class(boundary_condition_t), allocatable:: bc_minus_y

    integer(ik) :: i, j
    integer(ik) :: ilo, ihi, jlo, jhi
    integer(ik) :: ilo_bc, ihi_bc, jlo_bc, jhi_bc

    real(rk), dimension(:, :, :), codimension[:], allocatable :: rho_i_edges   !< ((1:2), i, j) i-interface (L/R state) values for density
    real(rk), dimension(:, :, :), codimension[:], allocatable :: rho_j_edges   !< ((1:2), i, j) j-interface (L/R state) values for density
    real(rk), dimension(:, :, :), codimension[:], allocatable ::   u_i_edges   !< ((1:2), i, j) i-interface (L/R state) values for x-velocity
    real(rk), dimension(:, :, :), codimension[:], allocatable ::   u_j_edges   !< ((1:2), i, j) j-interface (L/R state) values for x-velocity
    real(rk), dimension(:, :, :), codimension[:], allocatable ::   v_i_edges   !< ((1:2), i, j) i-interface (L/R state) values for y-velocity
    real(rk), dimension(:, :, :), codimension[:], allocatable ::   v_j_edges   !< ((1:2), i, j) j-interface (L/R state) values for y-velocity
    real(rk), dimension(:, :, :), codimension[:], allocatable ::   p_i_edges   !< ((1:2), i, j) i-interface (L/R state) values for pressure
    real(rk), dimension(:, :, :), codimension[:], allocatable ::   p_j_edges   !< ((1:2), i, j) j-interface (L/R state) values for pressure

    call debug_print('Running ausmpw_plus_solver_t%solve_ausmpw_plus()', __FILE__, __LINE__)

    if(dt < tiny(1.0_rk)) then
      call error_msg(module='mod_ausmpw_plus_solver', class='ausmpw_plus_solver_t', procedure='solve_ausmpw_plus', &
                   message="The timestep dt is < tiny(1.0_rk)", &
                   file_name=__FILE__, line_number=__LINE__)
    end if

    self%time = self%time + dt
    self%dt = dt
    self%iteration = self%iteration + 1
    self%primitive_lbounds = lbound(rho)
    self%primitive_ubounds = ubound(rho)

    call self%init_boundary_conditions(grid, bc_plus_x=bc_plus_x, bc_minus_x=bc_minus_x, &
                                       bc_plus_y=bc_plus_y, bc_minus_y=bc_minus_y)

    call self%apply_primitive_bc(rho=rho, u=u, v=v, p=p, lbounds=self%primitive_lbounds, &
                                 bc_plus_x=bc_plus_x, bc_minus_x=bc_minus_x, &
                                 bc_plus_y=bc_plus_y, bc_minus_y=bc_minus_y)

    edge_interpolator => muscl_interpolator_factory(self%input)

    ! This is useful if e-MLP is used
    ! call edge_interpolator%distinguish_continuous_regions(rho=rho, u=u, v=v, p=p, lbounds=self%primitive_lbounds)


    ilo = lbound(rho, dim=1) + n_ghost_layers - 1
    jlo = lbound(rho, dim=2) + n_ghost_layers - 1
    ihi = ubound(rho, dim=1) - n_ghost_layers
    jhi = ubound(rho, dim=2) - n_ghost_layers

    allocate(rho_i_edges(1:2, ilo-1:ihi, jlo:jhi)[*])
    allocate(u_i_edges(1:2,   ilo-1:ihi, jlo:jhi)[*])
    allocate(v_i_edges(1:2,   ilo-1:ihi, jlo:jhi)[*])
    allocate(p_i_edges(1:2,   ilo-1:ihi, jlo:jhi)[*])

    allocate(rho_j_edges(1:2, ilo:ihi, jlo-1:jhi)[*])
    allocate(u_j_edges(1:2,   ilo:ihi, jlo-1:jhi)[*])
    allocate(v_j_edges(1:2,   ilo:ihi, jlo-1:jhi)[*])
    allocate(p_j_edges(1:2,   ilo:ihi, jlo-1:jhi)[*])

    ! call edge_interpolator%interpolate_edge_values(q=rho, q_lbounds=lbound(q), e_lbounds=lbounds, i_edges=rho_i_edges, j_edges=rho_j_edges)
    ! call edge_interpolator%interpolate_edge_values(q=u,   q_lbounds=lbound(q), e_lbounds=lbounds, i_edges=u_i_edges, j_edges=u_j_edges)
    ! call edge_interpolator%interpolate_edge_values(q=v,   q_lbounds=lbound(q), e_lbounds=lbounds, i_edges=v_i_edges, j_edges=v_j_edges)
    ! call edge_interpolator%interpolate_edge_values(q=p,   q_lbounds=lbound(q), e_lbounds=lbounds, i_edges=p_i_edges, j_edges=p_j_edges)

    !
    !                    jflux(i,j)  'R'
    !               o--------------------o
    !               |                'L' |
    !               |                    |
    ! iflux(i-1, j) |     cell (i,j)     | iflux(i, j)
    !               |                    |
    !               |                'L' | 'R'
    !               o--------------------o
    !                  jflux(i,j-1)
    !
    ! This is the numbering convention that this module uses

    ilo = grid%ilo_cell
    ihi = grid%ihi_cell
    jlo = grid%jlo_cell
    jhi = grid%jhi_cell

    if(allocated(self%iflux)) deallocate(self%iflux)
    if(allocated(self%jflux)) deallocate(self%jflux)

    allocate(self%iflux(4, ilo - 1:ihi, jlo:jhi)[*])
    allocate(self%jflux(4, ilo:ihi, jlo - 1:jhi)[*])

    ilo_bc = grid%ilo_bc_cell
    ihi_bc = grid%ihi_bc_cell
    jlo_bc = grid%jlo_bc_cell
    jhi_bc = grid%jhi_bc_cell

    #:for DIR in DIRECTIONS
    call self%get_${DIR}$flux(grid=grid, &
                              rho_ave=rho, u_ave=u, v_ave=v, p_ave=p, &
                              rho_edge=rho_${DIR}$_edges, u_edge=u_${DIR}$_edges, &
                              v_edge=v_${DIR}$_edges, p_edge=p_${DIR}$_edges, edge_flux=self%${DIR}$flux)
    #:endfor

    ! Now flux the edges to get the next solution
    call self%flux_split_edges(grid, d_rho_dt, d_rho_u_dt, d_rho_v_dt, d_rho_E_dt)

    deallocate(rho_i_edges)
    deallocate(rho_j_edges)
    deallocate(u_i_edges)
    deallocate(u_j_edges)
    deallocate(v_i_edges)
    deallocate(v_j_edges)
    deallocate(p_i_edges)
    deallocate(p_j_edges)

    deallocate(bc_plus_x)
    deallocate(bc_plus_y)
    deallocate(bc_minus_x)
    deallocate(bc_minus_y)

    deallocate(self%iflux)
    deallocate(self%jflux)
  end subroutine solve_ausmpw_plus

  #:for DIR in DIRECTIONS
  subroutine get_${DIR}$flux(self, grid, rho_edge, u_edge, v_edge, p_edge, rho_ave, u_ave, v_ave, p_ave, edge_flux)
    !< Construct the fluxes for each edge in the ${DIR}$ direction. This is templated via the Fypp pre-processor
    class(ausmpw_plus_solver_t), intent(inout) :: self
    class(grid_t), intent(in) :: grid
    real(rk), dimension(:, :), codimension[*], intent(in) :: rho_ave    !< (i,j); cell averaged value ofdensity; needed for critical Mach number calcs
    real(rk), dimension(:, :), codimension[*], intent(in) :: u_ave    !< (i,j); cell averaged value of x-velocity; needed for critical Mach number calcs
    real(rk), dimension(:, :), codimension[*], intent(in) :: v_ave    !< (i,j); cell averaged value of y-velocity; needed for critical Mach number calcs
    real(rk), dimension(:, :), codimension[*], intent(in) :: p_ave    !< (i,j); cell averaged value of pressure; needed for critical Mach number calcs
    real(rk), dimension(:, :, :), codimension[*], intent(in) :: rho_edge    !< (1:2, i,j); interpolated w/limiter of choice (L/R state) values for density
    real(rk), dimension(:, :, :), codimension[*], intent(in) :: u_edge      !< (1:2, i,j); interpolated w/limiter of choice (L/R state) values for x-velocity
    real(rk), dimension(:, :, :), codimension[*], intent(in) :: v_edge      !< (1:2, i,j); interpolated w/limiter of choice (L/R state) values for y-velocity
    real(rk), dimension(:, :, :), codimension[*], intent(in) :: p_edge      !< (1:2, i,j); interpolated w/limiter of choice (L/R state) values for pressure
    real(rk), dimension(:, :, :), codimension[*], intent(inout) :: edge_flux

    integer(ik) :: i, j
    integer(ik) :: ilo, ihi, jlo, jhi
    real(rk) :: gamma      !< polytropic gas index
    real(rk) :: rho_L      !< density left state w/ limiter of choice
    real(rk) :: rho_R      !< density right state w/ limiter of choice
    real(rk) :: u_LHS      !< x-velocity left state w/ limiter of choice
    real(rk) :: u_RHS      !< x-velocity right state w/ limiter of choice
    real(rk) :: v_LHS      !< y-velocity left state w/ limiter of choice
    real(rk) :: v_RHS      !< y-velocity right state w/ limiter of choice
    real(rk) :: p_L        !< pressure left state w/ limiter of choice
    real(rk) :: p_R        !< pressure right state w/ limiter of choice
    real(rk) :: p_s        !< p_s = p_L * P_L_plus + p_R * P_R_minus
    real(rk) :: U_L        !< left state velocity component normal to the interface
    real(rk) :: U_R        !< right state velocity component normal to the interface
    real(rk) :: V_L        !< left state velocity component parallel to the interface
    real(rk) :: V_R        !< right state velocity component parallel to the interface
    real(rk) :: rho_L_half !< final interface density left state
    real(rk) :: rho_R_half !< final interface density right state
    real(rk) :: u_L_half   !< final interface x-velocity left state
    real(rk) :: u_R_half   !< final interface x-velocity right state
    real(rk) :: v_L_half   !< final interface y-velocity left state
    real(rk) :: v_R_half   !< final interface y-velocity right state
    real(rk) :: p_L_half   !< final interface pressure left state
    real(rk) :: p_R_half   !< final interface pressure right state
    real(rk) :: H_L_half   !< final interface enthalpy left state
    real(rk) :: H_R_half   !< final interface enthalpy right state
    real(rk) :: H_normal   !< total enthalpy in the normal direction to the interface
    real(rk) :: M_L        !< initial Mach number left state
    real(rk) :: M_R        !< initial Mach number right state
    real(rk) :: H_L        !< initial total enthalpy left state
    real(rk) :: H_R        !< initial total enthalpy right state
    real(rk) :: f_L        !< left state shock sensing function (Eq 33 in Ref [1])
    real(rk) :: f_R        !< right state shock sensing function (Eq 33 in Ref [1])
    real(rk) :: w1         !< pressure sensing function: this detects if there is a shock in the normal direction to the interface
    real(rk) :: w          !< shock sensing function: max(w1, w2); w1: normal direction, w2: transverse direction
    real(rk) :: c_s        !< transversal interface sound speed
    real(rk) :: c_half     !< final interface sound speed
    real(rk) :: m_half     !< interface Mach number
    real(rk) :: a               !< supersonic sensor
    real(rk) :: M_bar_L_plus    !< left final split Mach
    real(rk) :: M_bar_R_minus   !< right final split Mach
    real(rk) :: P_L_plus        !< left split pressure function
    real(rk) :: P_R_minus       !< right split pressure function
    real(rk) :: M_L_plus        !< left split Mach function
    real(rk) :: M_R_minus       !< right split Mach function
    real(rk) :: n_x             !< normal vectors of each face
    real(rk) :: n_y             !< normal vectors of each face
    real(rk) :: M_star, M_star_2, M_star_1
    real(rk) :: vel_ave, vel_ave_2
    real(rk) :: mass_flux_L, mass_flux_R
    real(rk) :: u_LHS_fix !< apply fix from Ref [2] for low Mach flows
    real(rk) :: u_RHS_fix !< apply fix from Ref [2] for low Mach flows
    real(rk) :: v_LHS_fix !< apply fix from Ref [2] for low Mach flows
    real(rk) :: v_RHS_fix !< apply fix from Ref [2] for low Mach flows
    real(rk) :: cs_L, cs_R
    real(rk) :: M_LHS, M_RHS, f_M
    logical :: apply_low_mach_fix

    integer(ik), parameter :: BOTTOM_IDX = 1 !< edge index for the bottom edge of the current cell
    integer(ik), parameter ::  RIGHT_IDX = 2 !< edge index for the right edge of the current cell
    integer(ik), parameter ::    TOP_IDX = 3 !< edge index for the top edge of the current cell
    integer(ik), parameter ::   LEFT_IDX = 4 !< edge index for the left edge of the current cell

    !dir$ assume_aligned rho_edge: __ALIGNBYTES__
    !dir$ assume_aligned u_edge: __ALIGNBYTES__
    !dir$ assume_aligned v_edge: __ALIGNBYTES__
    !dir$ assume_aligned p_edge: __ALIGNBYTES__
    !dir$ assume_aligned edge_flux: __ALIGNBYTES__

    gamma = self%gamma
    apply_low_mach_fix = self%apply_low_mach_fix

    ilo = lbound(edge_flux, dim=2)
    ihi = ubound(edge_flux, dim=2)
    jlo = lbound(edge_flux, dim=3)
    jhi = ubound(edge_flux, dim=3)

    !
    !                    jflux(i,j)  'R'
    !               o--------------------o
    !               |                'L' |
    !               |                    |
    ! iflux(i-1, j) |     cell (i,j)     | iflux(i, j)
    !               |                    |
    !               |                'L' | 'R'
    !               o--------------------o
    !                  jflux(i,j-1)
    !
    ! This is the numbering convention that this module uses

    !$omp parallel default(none), &
    !$omp firstprivate(gamma, ilo, ihi, jlo, jhi, apply_low_mach_fix) &
    !$omp private(i, j) &
    !$omp private(rho_L, rho_R, u_LHS, u_RHS, v_LHS, v_RHS, p_L, p_R, m_half) &
    !$omp private(n_x, n_y, p_s, U_L, U_R, V_L, V_R) &
    !$omp private(H_normal, M_L, M_R, H_L, H_R, f_L, f_R, w, c_s ,c_half) &
    !$omp private(M_bar_L_plus, M_bar_R_minus, P_L_plus, P_R_minus, M_L_plus, M_R_minus) &
    !$omp private(mass_flux_L, mass_flux_R) &
    !$omp private(u_LHS_fix, u_RHS_fix, v_LHS_fix, v_RHS_fix) &
    !$omp private(cs_L, cs_R, M_LHS, M_RHS, f_M) &
    !$omp shared(rho_ave, u_ave, v_ave, p_ave) &
    !$omp shared(grid, rho_edge, u_edge, v_edge, p_edge, edge_flux)
    !$omp do
    do j = jlo, jhi
      !$omp simd __INTERP_ALIGN__
      !dir$ vector aligned
      do i = ilo, ihi

        ! Left state
        rho_L = rho_edge(1, i, j)
        u_LHS =   u_edge(1, i, j)
        v_LHS =   v_edge(1, i, j)
        p_L =     p_edge(1, i, j)

        ! Right state
        rho_R = rho_edge(2, i, j)
        u_RHS =   u_edge(2, i, j)
        v_RHS =   v_edge(2, i, j)
        p_R =     p_edge(2, i, j)

      #:if DIR == 'i'
        n_x = grid%cell_edge_norm_vectors(1, RIGHT_IDX, i, j)
        n_y = grid%cell_edge_norm_vectors(2, RIGHT_IDX, i, j)

        U_L = u_LHS
        U_R = u_RHS
        V_L = v_LHS
        V_R = v_RHS

      #:elif DIR == 'j'
        n_x = grid%cell_edge_norm_vectors(1, TOP_IDX, i, j)
        n_y = grid%cell_edge_norm_vectors(2, TOP_IDX, i, j)

        U_L = v_LHS
        U_R = v_RHS
        V_L = u_LHS
        V_R = u_RHS
      #:endif

        cs_L = sqrt(gamma * p_L / rho_L)
        cs_R = sqrt(gamma * p_R / rho_R)
        M_LHS = sqrt(u_LHS**2 + v_LHS**2) / cs_L
        M_RHS = sqrt(u_RHS**2 + v_RHS**2) / cs_R

        if(apply_low_mach_fix .and. (abs(M_LHS) < LOW_MACH .or. abs(M_RHS) < LOW_MACH)) then
          f_M = min(1.0_rk, max(M_LHS, M_RHS))

          ! Eq 8 in Ref [2]
          u_LHS_fix = 0.5_rk * (u_LHS + u_RHS) + f_M * 0.5_rk * (u_LHS - u_RHS)
          u_RHS_fix = 0.5_rk * (u_LHS + u_RHS) - f_M * 0.5_rk * (u_LHS - u_RHS)
          v_LHS_fix = 0.5_rk * (v_LHS + v_RHS) + f_M * 0.5_rk * (v_LHS - v_RHS)
          v_RHS_fix = 0.5_rk * (v_LHS + v_RHS) - f_M * 0.5_rk * (v_LHS - v_RHS)

          u_LHS = u_LHS_fix
          u_RHS = u_RHS_fix
          v_LHS = v_LHS_fix
          v_RHS = v_RHS_fix
        end if

        ! Velocity normal to the edge, see Fig 2 in Ref[3]
        ! _RHS/_LHS is to avoid naming conflicts with _L and _R (slightly different meaning)
        ! U_L = u_LHS * n_x + v_LHS * n_y
        ! U_R = u_RHS * n_x + v_RHS * n_y

        ! ! Velocity component parallel to the edge
        ! V_L = u_LHS * (-n_y) + v_LHS * n_x
        ! V_R = u_RHS * (-n_y) + v_RHS * n_x

        H_L = (gamma / (gamma - 1.0_rk)) * (p_L / rho_L) + 0.5_rk * (u_LHS**2 + v_LHS**2)
        H_R = (gamma / (gamma - 1.0_rk)) * (p_R / rho_R) + 0.5_rk * (u_RHS**2 + v_RHS**2)

        ! Total enthalpy normal to the edge
        H_normal = min(H_L - 0.5_rk * V_L**2, H_R - 0.5_rk * V_R**2)

        ! Speed of sound normal to the edge, also like the critical sound speed
        ! across a normal shock
        c_s = sqrt(2.0_rk * ((gamma - 1.0_rk) / (gamma + 1.0_rk)) * H_normal)

        ! Interface sound speed
        if(0.5_rk * (U_L + U_R) < 0.0_rk) then  ! part (ii) in the paper after Eq 3
          c_half = c_s**2 / max(abs(U_R), c_s)
        else
          c_half = c_s**2 / max(abs(U_L), c_s) ! part (i)
        end if

        ! Left/Right Mach number
        M_L = U_L / c_half
        M_R = U_R / c_half

        ! Mach splitting functions
        M_L_plus = mach_split_plus(M_L)
        M_R_minus = mach_split_minus(M_R)

        ! Pressure splitting functions
        P_R_minus = pressure_split_minus(M_R)
        P_L_plus = pressure_split_plus(M_L)

        p_s = p_L * P_L_plus + p_R * P_R_minus
        w = get_w(p_L=p_L, p_R=p_R)

        #:if DIR == 'i'
          call get_f(p_L=p_L, p_R=p_R, p_s=p_s, &
                    p1_L=p_ave(i, j - 1), p1_R=p_ave(i + 1, j - 1), &
                    p2_L=p_ave(i, j + 1), p2_R=p_ave(i + 1, j + 1), &
                    f_L=f_L, f_R=f_R)
        #:else
          call get_f(p_L=p_L, p_R=p_R, p_s=p_s, &
                    p1_L=p_ave(i + 1, j), p1_R=p_ave(i + 1, j + 1), &
                    p2_L=p_ave(i - 1, j), p2_R=p_ave(i - 1, j + 1), &
                    f_L=f_L, f_R=f_R)
        #:endif

        ! From Eq. 24 (ii) in Ref [1]
        if(M_L_plus + M_R_minus < 0.0_rk) then
          M_bar_L_plus = M_L_plus * w * (1.0_rk + f_L)
          M_bar_R_minus = M_R_minus + M_L_plus * ((1.0_rk - w) * (1.0_rk + f_L) - f_R)
        else ! From Eq. 24 (i) in Ref [1]
          M_bar_L_plus = M_L_plus + M_R_minus * ((1.0_rk - w) * (1.0_rk + f_R) - f_L)
          M_bar_R_minus = M_R_minus * w * (1.0_rk + f_R)
        end if

        mass_flux_L = M_bar_L_plus * c_half * rho_L
        mass_flux_R = M_bar_R_minus * c_half * rho_R
        edge_flux(1, i, j) = mass_flux_L + mass_flux_R
        edge_flux(2, i, j) = (mass_flux_L * u_LHS) + (mass_flux_R * u_RHS) + ((P_L_plus * n_x * p_L) + (P_R_minus * n_x * p_R))
        edge_flux(3, i, j) = (mass_flux_L * v_LHS) + (mass_flux_R * v_RHS) + ((P_L_plus * n_y * p_L) + (P_R_minus * n_y * p_R))
        edge_flux(4, i, j) = (mass_flux_L * H_L) + (mass_flux_R * H_R)
      end do
    end do
    !$omp end do
    !$omp end parallel
  end subroutine get_${DIR}$flux

  #:endfor

  pure subroutine project_vector(a, b, b_parallel, b_perpendicular)
    !< Project vector "b" onto vector "a" and get the parallel and perpenticular components
    real(rk), dimension(2), intent(in) :: a                !<(x,y); the vector getting projected
    real(rk), dimension(2), intent(in) :: b                !<(x,y); the vector to project onto
    real(rk), dimension(2), intent(out) :: b_parallel      !<(x,y); vector parallel to a
    real(rk), dimension(2), intent(out) :: b_perpendicular !<(x,y); vector perpendicular to a

    b_parallel = (dot_product(b, a) / dot_product(a, a)) * a
    b_perpendicular = b - b_parallel
  end subroutine project_vector

  subroutine finalize(self)
    !< Cleanup the AUSMPW+ solver
    type(ausmpw_plus_solver_t), intent(inout) :: self
    call debug_print('Running ausmpw_plus_solver_t%finalize()', __FILE__, __LINE__)
    if(allocated(self%iflux)) deallocate(self%iflux) ! these should already be deallocated
    if(allocated(self%jflux)) deallocate(self%jflux) ! these should already be deallocated
  end subroutine finalize

  pure real(rk) function pressure_split_plus(M) result(P_plus)
    !< The pressure splitting function (Eq. 10 in Ref[1]). This is the P+ version
    real(rk), intent(in) :: M !< interface Mach number

    if(abs(M) > 1.0_rk) then
      P_plus = 0.5_rk * (1.0_rk + sign(1.0_rk, M))
    else ! |M| <= 1
      P_plus = 0.25_rk * (M + 1.0_rk)**2 * (2.0_rk - M) + alpha * M * (M**2 - 1.0_rk)**2
    endif
  end function pressure_split_plus

  pure real(rk) function pressure_split_minus(M) result(P_minus)
    !< The pressure splitting function (Eq. 10 in Ref[1]). This is the P- version
    real(rk), intent(in) :: M !< interface Mach number

    if(abs(M) > 1.0_rk) then
      P_minus = 0.5_rk * (1.0_rk - sign(1.0_rk, M))
    else ! |M| <= 1
      P_minus = 0.25_rk * (M - 1.0_rk)**2 * (2.0_rk + M) - alpha * M * (M**2 - 1.0_rk)**2
    endif
  end function pressure_split_minus

  pure real(rk) function mach_split_plus(M) result(M_plus)
    !< The Mach splitting function (Eq. 9 in Ref[1]). This is the M+ version. This is kept
    !< simple for inlining
    real(rk), intent(in) :: M !< interface Mach number

    if(abs(M) > 1.0_rk) then
      M_plus = 0.5_rk * (M + abs(M))
    else ! |M| <= 1
      M_plus = 0.25_rk * (M + 1.0_rk)**2
    endif
  end function mach_split_plus

  pure real(rk) function mach_split_minus(M) result(M_minus)
    !< The Mach splitting function (Eq. 9 in Ref [1]). This is the M- version. This is kept
    !< simple for inlining
    real(rk), intent(in) :: M !< interface Mach number

    if(abs(M) > 1.0_rk) then
      M_minus = 0.5_rk * (M - abs(M))
    else ! |M| <= 1
      M_minus = -0.25_rk * (M - 1.0_rk)**2
    endif
  end function mach_split_minus

  pure subroutine get_f(p_L, p_R, p_s, p1_L, p1_R, p2_L, p2_R, f_L, f_R)
    !< Implementation of the f function (Eq. 26 in Ref [1]). This is used to help determine
    !< where shock discontinuities are
    real(rk), intent(in) :: p_L    !< L pressure
    real(rk), intent(in) :: p_R    !< R pressure
    real(rk), intent(in) :: p1_L   !< L pressure, j+1 for i direction, i-1 for j direction
    real(rk), intent(in) :: p1_R   !< R pressure, j-1 for i direction, i+1 for j direction
    real(rk), intent(in) :: p2_L   !< L pressure, j+1 for i direction, i-1 for j direction
    real(rk), intent(in) :: p2_R   !< R pressure, j-1 for i direction, i+1 for j direction
    real(rk), intent(in) :: p_s !< p_s = p_L * P_L(+) + p_R * P_R(-)

    real(rk), intent(out) :: f_L !< L "f" function
    real(rk), intent(out) :: f_R !< R "f" function

    real(rk) :: min_term

    if(abs(p_s) < tiny(1.0_rk)) then ! p_s == 0
      f_L = 0.0_rk
      f_R = 0.0_rk
    else
      min_term = min(1.0_rk, min(p1_L, p1_R, p2_L, p2_R) / min(p_L, p_R))**2
      f_L = ((p_L / p_s) - 1.0_rk) * min_term
      f_R = ((p_R / p_s) - 1.0_rk) * min_term
    end if
  end subroutine get_f

  pure real(rk) function get_w(p_L, p_R) result(w)
    !< Discontinuity sensor w_1 (Eq. 25 in Ref [1]). This detects whether a shock
    !< exists in the normal direction to the cell-interface or not
    real(rk), intent(in) :: p_L !< left interface pressure
    real(rk), intent(in) :: p_R !< right interface pressure

    real(rk) :: min_term

    min_term = min((p_L / p_R),(p_R / p_L))
    w = 1.0_rk - min_term * min_term * min_term
  end function get_w

end module mod_ausmpw_plus_solver
