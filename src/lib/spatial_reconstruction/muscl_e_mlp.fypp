! MIT License
! Copyright (c) 2019 Sam Miller
! Permission is hereby granted, free of charge, to any person obtaining a copy
! of this software and associated documentation files (the "Software"), to deal
! in the Software without restriction, including without limitation the rights
! to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
! copies of the Software, and to permit persons to whom the Software is
! furnished to do so, subject to the following conditions:
!
! The above copyright notice and this permission notice shall be included in all
! copies or substantial portions of the Software.
!
! THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
! IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
! FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
! AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
! LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
! OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
! SOFTWARE.

! Fypp variables. This allows us to generate an edge flux subroutine for each direction
! and still allow the compiler to optimize
#:set DIRECTIONS = ['i', 'j']
#:set LIMITERS = ['minmod', 'superbee', 'vanleer']

module mod_muscl_e_mlp
  !> Summary: Provide TVD 2nd order MUSCL edge interpolation
  !> Date: 08/03/2020
  !> Author: Sam Miller
  !> Notes:
  !> References:
  !      [1]

  use, intrinsic :: iso_fortran_env, only: ik => int32, rk => real64, std_err => error_unit
  use mod_muscl_interpolation, only: muscl_interpolation_t
  use mod_globals, only: n_ghost_layers, debug_print
  use mod_error, only: error_msg

  implicit none
  private
  public :: muscl_e_mlp_t, new_muscl_e_mlp

  type, extends(muscl_interpolation_t) :: muscl_e_mlp_t
    integer(ik), dimension(:,:), allocatable :: continuity_sensor !< (i,j); flag for continuous and linear/non-linear discontinuity regions
  contains
    procedure, public :: initialize => init_muscl_e_mlp
    procedure, public :: interpolate_edge_values
    procedure, public :: distinguish_continuous_regions

    #:for DIR in DIRECTIONS
    #:for LIMITER in LIMITERS
    procedure, private :: interp_muscl_e_mlp_${DIR}$_edge_${LIMITER}$
    #:endfor
    #:endfor

    final :: finalize
  end type

contains

function new_muscl_e_mlp(limiter) result(interpolator)
  type(muscl_e_mlp_t), pointer :: interpolator
  character(len=*), intent(in) :: limiter

  allocate(interpolator)
  interpolator%limiter_name = trim(limiter)
  interpolator%order = 2
end function

subroutine init_muscl_e_mlp(self, limiter)
  class(muscl_e_mlp_t), intent(inout) :: self
  character(len=*), intent(in) :: limiter
  self%limiter_name = trim(limiter)
  self%order = 2
end subroutine init_muscl_e_mlp

subroutine interpolate_edge_values(self, q, lbounds, i_edges, j_edges)
  class(muscl_e_mlp_t), intent(in) :: self
  integer(ik), dimension(2), intent(in) :: lbounds

  real(rk), dimension(lbounds(1):, lbounds(2):), contiguous, intent(in) :: q
  !< (i,j); primitive variable to reconstruct at the edge

  real(rk), dimension(:, :, :), allocatable, intent(out) :: i_edges
  real(rk), dimension(:, :, :), allocatable, intent(out) :: j_edges


  select case(trim(self%limiter_name))
    #:for LIMITER in LIMITERS
  case("${LIMITER}$")
    #:for DIR in DIRECTIONS
    call self%interp_muscl_e_mlp_${DIR}$_edge_${LIMITER}$(q, lbounds, ${DIR}$_edges)
    #:endfor
    #:endfor
  case default
    call error_msg(module='mod_muscl_e_mlp', class='muscl_e_mlp_t', procedure='interpolate_edge_values', &
                   message="Unknown limiter type: '" // trim(self%limiter_name) // "'", &
                   file_name=__FILE__, line_number=__LINE__)
  end select

end subroutine interpolate_edge_values

subroutine distinguish_continuous_regions(self, rho, u, v, p, lbounds)
  !< For plain-jane TVD2, there is no need to distinguish the regions which are continuous or linear/non-linear discontinuity regions. This
  !< is required by the parent class, but is really only implemented in the e-MLP classes.
  class(muscl_e_mlp_t), intent(in) :: self
  integer(ik), dimension(2), intent(in) :: lbounds
  real(rk), dimension(lbounds(1):, lbounds(2):), contiguous, intent(in) :: rho !< (i,j); density
  real(rk), dimension(lbounds(1):, lbounds(2):), contiguous, intent(in) :: u !< (i,j); density
  real(rk), dimension(lbounds(1):, lbounds(2):), contiguous, intent(in) :: v !< (i,j); density
  real(rk), dimension(lbounds(1):, lbounds(2):), contiguous, intent(in) :: p !< (i,j); density
end subroutine distinguish_continuous_regions

subroutine finalize(self)
  !< Finalizer routine to clean up allocated data
  type(muscl_e_mlp_t), intent(inout) :: self
  if (allocated(self%continuity_sensor)) deallocate(self%continuity_sensor)
end subroutine finalize

#:for LIMITER in LIMITERS
#:for DIR in DIRECTIONS
subroutine interp_muscl_e_mlp_${DIR}$_edge_${LIMITER}$(self, q, lbounds, edge_values)
  class(muscl_e_mlp_t), intent(in) :: self
  integer(ik), dimension(2), intent(in) :: lbounds

  real(rk), dimension(lbounds(1):, lbounds(2):), contiguous, intent(in) :: q
  !< (i,j); primitive variable to reconstruct at the edge

  real(rk), dimension(:, :, :), allocatable, intent(out) :: edge_values
  !<((L,R), i, j); L/R state for each edge

  integer(ik) :: i, j
  integer(ik) :: ilo, ihi, jlo, jhi

  real(rk) :: delta_i_minus_half, delta_i_plus_half, delta_i_plus_three_half
  real(rk) :: r_R, r_L, phi_limit

  ilo = lbound(q, dim=1) + n_ghost_layers - 1
  ihi = ubound(q, dim=1) - n_ghost_layers + 1
  jlo = lbound(q, dim=2) + n_ghost_layers - 1
  jhi = ubound(q, dim=2) - n_ghost_layers + 1

    !
    !                    jflux(i,j)  'R'
    !               o--------------------o
    !               |                'L' |
    !               |                    |
    ! iflux(i-1, j) |     cell (i,j)     | iflux(i, j)
    !               |                    |
    !               |                'L' | 'R'
    !               o--------------------o
    !                  jflux(i,j-1)
    !
    ! This is the numbering convention that this module uses

  do j = jlo, jhi
    do i = ilo, ihi

    #:if DIR == 'i'
      delta_i_minus_half = q(i, j) - q(i - 1, j)
      delta_i_plus_half = q(i + 1, j) - q(i, j)
      delta_i_plus_three_half = q(i + 2, j) - q(i + 1, j)
    #:elif DIR == 'j'
      delta_i_minus_half = q(i, j) - q(i, j - 1)
      delta_i_plus_half = q(i, j + 1) - q(i, j)
      delta_i_plus_three_half = q(i, j + 2) - q(i, j + 1)
    #:endif

      if (abs(delta_i_minus_half) < epsilon(1.0_rk)) delta_i_minus_half = 0.0_rk
      if (abs(delta_i_plus_half) < epsilon(1.0_rk)) delta_i_plus_half = 0.0_rk
      if (abs(delta_i_plus_three_half) < epsilon(1.0_rk)) delta_i_plus_three_half = 0.0_rk

      r_L = delta_i_plus_half / (delta_i_minus_half + 1e-16_rk)
      r_R = delta_i_plus_half / (delta_i_plus_three_half + 1e-16_rk)

      ! Apply the limiter
    #:if LIMITER == 'minmod'
      phi_limit = max(0.0_rk, min(r_L, 1.0_rk))
    #:elif LIMITER == 'superbee'
      phi_limit = max(0.0_rk, min(2.0_rk * r_L, 1.0_rk), min(r_L, 2.0_rk))
    #:elif LIMITER == 'vanleer'
      phi_limit = (r_L + abs(r_L)) / (1.0_rk + abs(r_L))
    #:endif

      ! Phi L, e.g. left state
      edge_values(1, i, j) = q(i, j) + 0.5_rk * phi_limit * delta_i_minus_half

      ! Apply the limiter
    #:if LIMITER == 'minmod'
      phi_limit = max(0.0_rk, min(r_R, 1.0_rk))
    #:elif LIMITER == 'superbee'
      phi_limit = max(0.0_rk, min(2.0_rk * r_R, 1.0_rk), min(r_R, 2.0_rk))
    #:elif LIMITER == 'vanleer'
      phi_limit = (r_R + abs(r_R)) / (1.0_rk + abs(r_R))
    #:endif

      ! Phi R, e.g. right state
      edge_values(2, i, j) = q(i + 1, j) - 0.5_rk * phi_limit * delta_i_plus_three_half

    end do
  end do

end subroutine interp_muscl_e_mlp_${DIR}$_edge_${LIMITER}$

#:endfor
#:endfor
end module mod_muscl_e_mlp
