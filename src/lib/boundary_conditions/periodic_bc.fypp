! MIT License
! Copyright (c) 2019 Sam Miller
! Permission is hereby granted, free of charge, to any person obtaining a copy
! of this software and associated documentation files (the "Software"), to deal
! in the Software without restriction, including without limitation the rights
! to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
! copies of the Software, and to permit persons to whom the Software is
! furnished to do so, subject to the following conditions:
!
! The above copyright notice and this permission notice shall be included in all
! copies or substantial portions of the Software.
!
! THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
! IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
! FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
! AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
! LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
! OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
! SOFTWARE.

module mod_periodic_bc

  use, intrinsic :: iso_fortran_env, only: ik => int32, rk => real64, std_err => error_unit
  use mod_error, only: error_msg
  use mod_functional, only: reverse, operator(.reverse.)
  use mod_field, only: field_2d_t
  use mod_globals, only: enable_debug_print, debug_print
  use mod_grid_block_2d, only: grid_block_2d_t
  use mod_boundary_conditions, only: boundary_condition_t
  use mod_parallel, only: jlo_neighbor => DOWN, &
                          ilo_neighbor => LEFT, &
                          ihi_neighbor => RIGHT, &
                          jhi_neighbor => UP, &
                          ilo_jlo_neighbor => LOWER_LEFT, &
                          ihi_jlo_neighbor => LOWER_RIGHT, &
                          ilo_jhi_neighbor => UPPER_LEFT, &
                          ihi_jhi_neighbor => UPPER_RIGHT
  use mod_input, only: input_t
  use mod_functional, only: set

  implicit none

  private
  public :: periodic_bc_t, periodic_bc_constructor

  type, extends(boundary_condition_t) :: periodic_bc_t
    logical :: do_corners = .false.
  contains
    procedure, public :: apply => apply_periodic_primitive_var_bc
    final :: finalize
  endtype periodic_bc_t

contains

  function periodic_bc_constructor(location, input, grid) result(bc)
    !< Create the periodic boundary condition type
    type(periodic_bc_t), pointer :: bc
    character(len=2), intent(in) :: location !< Location (+x, -x, +y, or -y)
    class(input_t), intent(in) :: input
    class(grid_block_2d_t), intent(in) :: grid

    allocate(bc)
    bc%name = 'periodic'
    bc%location = location
    bc%priority = 2 !< currently the highest (first to be applied) priority
    call bc%set_indices(grid)

    if(trim(input%plus_x_bc) == 'periodic' .and. &
       trim(input%minus_x_bc) == 'periodic' .and. &
       trim(input%plus_y_bc) == 'periodic' .and. &
       trim(input%minus_y_bc) == 'periodic') then

      bc%do_corners = .true.
    endif

  endfunction periodic_bc_constructor

  subroutine apply_periodic_primitive_var_bc(self, rho, u, v, p)
    !< Apply the periodic BC to the primitive variables (rho, u, v, and p)
    class(periodic_bc_t), intent(inout) :: self
    class(field_2d_t), intent(inout) :: rho
    class(field_2d_t), intent(inout) :: u
    class(field_2d_t), intent(inout) :: v
    class(field_2d_t), intent(inout) :: p

    logical :: edge_error

    integer(ik) :: sync_stat           !< syncronization status
    character(len=200) :: sync_err_msg !< syncronization error message (if any)
    character(len=200) :: img_err_msg !< syncronization error message (if any)
    integer(ik), dimension(8) :: neighbors = 0 !< parallel neighbor image indices

    real(rk), dimension(:, :), allocatable, save :: ilo_edge[:]   !< (i, j)[image]; Coarray buffer to copy left neighbor halo data
    real(rk), dimension(:, :), allocatable, save :: ihi_edge[:]  !< (i, j)[image]; Coarray buffer to copy right neighbor halo data
    real(rk), dimension(:, :), allocatable, save :: jhi_edge[:]    !< (i, j)[image]; Coarray buffer to copy top neighbor halo data
    real(rk), dimension(:, :), allocatable, save :: jlo_edge[:] !< (i, j)[image]; Coarray buffer to copy bottom neighbor halo data

    real(rk), dimension(:, :), allocatable, save :: ilo_jhi_corner[:]  !< (i, j)[image]; Coarray buffer to copy bottom neighbor halo data
    real(rk), dimension(:, :), allocatable, save :: ihi_jhi_corner[:] !< (i, j)[image]; Coarray buffer to copy bottom neighbor halo data
    real(rk), dimension(:, :), allocatable, save :: ilo_jlo_corner[:]  !< (i, j)[image]; Coarray buffer to copy bottom neighbor halo data
    real(rk), dimension(:, :), allocatable, save :: ihi_jlo_corner[:] !< (i, j)[image]; Coarray buffer to copy bottom neighbor halo data

    integer(ik) :: ilo, ihi, jlo, jhi, j
    integer(ik) :: ilo_halo, ihi_halo, jlo_halo, jhi_halo
    integer(ik) :: nh, ni, nj
    integer(ik), dimension(:), allocatable :: unique_x_neighbors, unique_y_neighbors, unique_corner_neighbors

    if(enable_debug_print) call debug_print('Running periodic_bc_t%apply_periodic_primitive_var_bc() ', __FILE__, __LINE__)
    edge_error = .false.
    sync_stat = 0
    sync_err_msg = ''
    img_err_msg = ''

    ilo = rho%lbounds(1)
    ihi = rho%ubounds(1)
    jlo = rho%lbounds(2)
    jhi = rho%ubounds(2)
    ilo_halo = rho%lbounds_halo(1)
    ihi_halo = rho%ubounds_halo(1)
    jlo_halo = rho%lbounds_halo(2)
    jhi_halo = rho%ubounds_halo(2)
    nh = rho%n_halo_cells
    neighbors = rho%neighbors

    unique_x_neighbors = set([rho%host_image_id, neighbors(ilo_neighbor), neighbors(ihi_neighbor)])
    unique_y_neighbors = set([rho%host_image_id, neighbors(jlo_neighbor), neighbors(jhi_neighbor)])
    unique_corner_neighbors = set([rho%host_image_id, &
                                   neighbors(ilo_jlo_neighbor), &
                                   neighbors(ilo_jhi_neighbor), &
                                   neighbors(ihi_jlo_neighbor), &
                                   neighbors(ihi_jhi_neighbor)])

    ! Only allocate once, b/c this will cause an implicit sync all due to the coarray index
    ni = rho%domain_shape(1)
    nj = rho%domain_shape(2)
    nh = rho%n_halo_cells

    if(.not. allocated(ilo_edge)) allocate(ilo_edge(nh, nj)[*])
    if(.not. allocated(ihi_edge)) allocate(ihi_edge(nh, nj)[*])
    if(.not. allocated(jhi_edge)) allocate(jhi_edge(ni, rho%n_halo_cells)[*])
    if(.not. allocated(jlo_edge)) allocate(jlo_edge(ni, rho%n_halo_cells)[*])

    if(.not. allocated(ilo_jhi_corner)) allocate(ilo_jhi_corner(nh, nh)[*])
    if(.not. allocated(ilo_jlo_corner)) allocate(ilo_jlo_corner(nh, nh)[*])
    if(.not. allocated(ihi_jhi_corner)) allocate(ihi_jhi_corner(nh, nh)[*])
    if(.not. allocated(ihi_jlo_corner)) allocate(ihi_jlo_corner(nh, nh)[*])

    #:for F in ['rho', 'u', 'v', 'p']
      ilo_jhi_corner = 0.0_rk
      ihi_jhi_corner = 0.0_rk
      ilo_jlo_corner = 0.0_rk
      ihi_jlo_corner = 0.0_rk
      ilo_edge = 0.0_rk
      ihi_edge = 0.0_rk
      jhi_edge = 0.0_rk
      jlo_edge = 0.0_rk

      select case(self%location)
      case('+x', '-x')
        ! if(${F}$%on_ilo_bc .or. ${F}$%on_ihi_bc) then
        if(num_images() > 1) then
          sync images(unique_x_neighbors, &
                      stat=sync_stat, errmsg=sync_err_msg)
        endif

        if(sync_stat /= 0) then
          write(img_err_msg, *) "Images: [", unique_x_neighbors, "], sync_stat = ", sync_stat
          call error_msg(module_name='mod_periodic_bc', class_name='periodic_bc_t', &
                         procedure_name='apply_periodic_primitive_var_bc', &
                         message="Unable to sync "//trim(img_err_msg)//", sync_err_msg: '"//trim(sync_err_msg)//"'", &
                         file_name=__FILE__, line_number=__LINE__)
        endif

        ! Put to the coarray buffer
        if(${F}$%on_ilo_bc .or. ${F}$%on_ihi_bc) then
          ilo_edge(:, :)[neighbors(ihi_neighbor)] = ${F}$%data(ihi - nh + 1:ihi, jlo:jhi) ! ihi -> ilo
          ihi_edge(:, :)[neighbors(ilo_neighbor)] = ${F}$%data(ilo:ilo + nh - 1, jlo:jhi) ! ilo -> ihi
        endif

        if(num_images() > 1) sync images(unique_x_neighbors, &
                                         stat=sync_stat, errmsg=sync_err_msg)
        if(sync_stat /= 0) then
          write(img_err_msg, *) "Images: [", unique_x_neighbors, "], sync_stat = ", sync_stat
          call error_msg(module_name='mod_periodic_bc', class_name='periodic_bc_t', &
                         procedure_name='apply_periodic_primitive_var_bc', &
                         message="Unable to sync "//trim(img_err_msg)//", sync_err_msg: '"//trim(sync_err_msg)//"'", &
                         file_name=__FILE__, line_number=__LINE__)
        endif

        ! Get from the coarray buffer
        if(${F}$%on_ihi_bc) ${F}$%data(ihi + 1:ihi_halo, jlo:jhi) = ihi_edge
        if(${F}$%on_ilo_bc) ${F}$%data(ilo_halo:ilo - 1, jlo:jhi) = ilo_edge
        ! endif ! on ilo or ihi bc

      case('+y', '-y')
        if(num_images() > 1) sync images(unique_y_neighbors, &
                                         stat=sync_stat, errmsg=sync_err_msg)
        if(sync_stat /= 0) then
          write(img_err_msg, *) "Images: [", unique_y_neighbors, "], sync_stat = ", sync_stat
          call error_msg(module_name='mod_periodic_bc', class_name='periodic_bc_t', &
                         procedure_name='apply_periodic_primitive_var_bc', &
                         message="Unable to sync "//trim(img_err_msg)//", sync_err_msg: '"//trim(sync_err_msg)//"'", &
                         file_name=__FILE__, line_number=__LINE__)
        endif

        ! Put to the coarray buffer
        if(${F}$%on_jlo_bc .or. ${F}$%on_jhi_bc) then
          jlo_edge(:, :)[neighbors(jhi_neighbor)] = ${F}$%data(ilo:ihi, jhi - nh + 1:jhi) ! jhi -> jlo
          jhi_edge(:, :)[neighbors(jlo_neighbor)] = ${F}$%data(ilo:ihi, jlo:jlo + nh - 1) ! jlo -> jhi
        endif

        if(num_images() > 1) sync images(unique_y_neighbors, &
                                         stat=sync_stat, errmsg=sync_err_msg)
        if(sync_stat /= 0) then
          write(img_err_msg, *) "Images: [", unique_y_neighbors, "], sync_stat = ", sync_stat
          call error_msg(module_name='mod_periodic_bc', class_name='periodic_bc_t', &
                         procedure_name='apply_periodic_primitive_var_bc', &
                         message="Unable to sync "//trim(img_err_msg)//", sync_err_msg: '"//trim(sync_err_msg)//"'", &
                         file_name=__FILE__, line_number=__LINE__)
        endif

        ! Get from the coarray buffer
        if(${F}$%on_jlo_bc) ${F}$%data(ilo:ihi, jlo_halo:jlo - 1) = jlo_edge
        if(${F}$%on_jhi_bc) ${F}$%data(ilo:ihi, jhi + 1:jhi_halo) = jhi_edge

        do j = 1, nh
          if (any(abs(jlo_edge(:,j) - jhi_edge(:,j)) > 0.0_rk)) then
            print*, "${F}$"
            ! write(*, *) 'image', this_image(), 'j', j, 'lo   :', jlo_edge(:,j)
            ! write(*, *) 'image', this_image(), 'j', j, 'hi   :', jhi_edge(:,j)
            write(*, *) 'image', this_image(), 'j', j, "diff :", abs(jlo_edge(:,j) - jhi_edge(:,j))
            print*
            edge_error = .true.
          endif
        end do
        ! endif ! on jlo or jhi bc
      endselect

      if(self%do_corners) then
        if(num_images() > 1) sync images(unique_corner_neighbors, &
                                         stat=sync_stat, errmsg=sync_err_msg)
        if(sync_stat /= 0) then
          write(img_err_msg, '(a,10(i0, 1x), a)') "Images: [", unique_corner_neighbors, "]"
          call error_msg(module_name='mod_periodic_bc', class_name='periodic_bc_t', &
                         procedure_name='apply_periodic_primitive_var_bc', &
                         message="Unable to sync "//trim(img_err_msg)//", sync_err_msg: '"//trim(sync_err_msg)//"'", &
                         file_name=__FILE__, line_number=__LINE__)
        endif

        ! Put to the coarray buffer
        if((${F}$%on_ilo_bc .and. ${F}$%on_jlo_bc) .or. &
           (${F}$%on_ihi_bc .and. ${F}$%on_jlo_bc) .or. &
           (${F}$%on_ilo_bc .and. ${F}$%on_jhi_bc) .or. &
           (${F}$%on_ihi_bc .and. ${F}$%on_jhi_bc)) then
          ilo_jlo_corner(:, :)[neighbors(ihi_jhi_neighbor)] = ${F}$%data(ilo:ilo + nh - 1, jlo:jlo + nh - 1) ! ihi_jhi -> ilo_jlo
          ihi_jlo_corner(:, :)[neighbors(ilo_jhi_neighbor)] = ${F}$%data(ihi - nh + 1:ihi, jlo:jlo + nh - 1) ! ilo_jhi -> ihi_jlo
          ilo_jhi_corner(:, :)[neighbors(ihi_jlo_neighbor)] = ${F}$%data(ilo:ilo + nh - 1, jhi - nh + 1:jhi) ! ihi_jlo -> ilo_jhi
          ihi_jhi_corner(:, :)[neighbors(ilo_jlo_neighbor)] = ${F}$%data(ihi - nh + 1:ihi, jhi - nh + 1:jhi) ! ilo_jlo -> ihi_jhi
        endif

        if(num_images() > 1) sync images(unique_corner_neighbors, &
                                         stat=sync_stat, errmsg=sync_err_msg)
        if(sync_stat /= 0) then
          write(img_err_msg, '(a,10(i0, 1x), a)') "Images: [", unique_corner_neighbors, "]"
          call error_msg(module_name='mod_periodic_bc', class_name='periodic_bc_t', &
                         procedure_name='apply_periodic_primitive_var_bc', &
                         message="Unable to sync "//trim(img_err_msg)//", sync_err_msg: '"//trim(sync_err_msg)//"'", &
                         file_name=__FILE__, line_number=__LINE__)
        endif

        ! Get from the coarray buffer
        if(${F}$%on_ilo_bc .and. ${F}$%on_jlo_bc) ${F}$%data(ilo_halo:ilo - 1, jlo_halo:jlo - 1) = ihi_jhi_corner
        if(${F}$%on_ihi_bc .and. ${F}$%on_jlo_bc) ${F}$%data(ihi + 1:ihi_halo, jlo_halo:jlo - 1) = ilo_jhi_corner
        if(${F}$%on_ilo_bc .and. ${F}$%on_jhi_bc) ${F}$%data(ilo_halo:ilo - 1, jhi + 1:jhi_halo) = ihi_jlo_corner
        if(${F}$%on_ihi_bc .and. ${F}$%on_jhi_bc) ${F}$%data(ihi + 1:ihi_halo, jhi + 1:jhi_halo) = ilo_jlo_corner

        ! endif
      endif ! do_corners

      if (edge_error) error stop
    #:endfor
    deallocate(unique_x_neighbors, unique_y_neighbors, unique_corner_neighbors)
  endsubroutine apply_periodic_primitive_var_bc

  subroutine finalize(self)
    !< Cleanup the type
    type(periodic_bc_t), intent(inout) :: self
    call debug_print('Running periodic_bc_t%finalize()', __FILE__, __LINE__)
    if(allocated(self%ilo_ghost)) deallocate(self%ilo_ghost)
    if(allocated(self%ihi_ghost)) deallocate(self%ihi_ghost)
    if(allocated(self%jlo_ghost)) deallocate(self%jlo_ghost)
    if(allocated(self%jhi_ghost)) deallocate(self%jhi_ghost)
  endsubroutine

endmodule mod_periodic_bc
