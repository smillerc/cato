! finterp: Modern Fortran Multidimensional Linear Interpolation
! https://github.com/jacobwilliams/finterp

! Copyright (c) 2016-2019, Jacob Williams
! All rights reserved.

! Redistribution and use in source and binary forms, with or without modification,
! are permitted provided that the following conditions are met:

! * Redistributions of source code must retain the above copyright notice, this
!   list of conditions and the following disclaimer.

! * Redistributions in binary form must reproduce the above copyright notice, this
!   list of conditions and the following disclaimer in the documentation and/or
!   other materials provided with the distribution.

! * The names of its contributors may not be used to endorse or promote products
!   derived from this software without specific prior written permission.

! THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
! ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
! WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
! DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
! ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
! (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
! LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
! ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
! (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
! SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

module test_linear_interp
  !< Units test for 2d-6d linear interpolation.

  use linear_interpolation_module
  use, intrinsic :: iso_fortran_env, only: wp => real64
  use funit

  implicit none

  integer, parameter :: nx = 6     !< number of points in x
  integer, parameter :: ny = 6     !< number of points in y
  integer, parameter :: nz = 6     !< number of points in z
  integer, parameter :: nq = 6     !< number of points in q
  integer, parameter :: nr = 6     !< number of points in r
  integer, parameter :: ns = 6     !< number of points in s

  real(wp) :: x(nx), y(ny), z(nz), q(nq), r(nr), s(ns)
  real(wp) :: fcn_1d(nx)
  real(wp) :: fcn_2d(nx, ny)
  real(wp) :: fcn_3d(nx, ny, nz)
  real(wp) :: fcn_4d(nx, ny, nz, nq)
  real(wp) :: fcn_5d(nx, ny, nz, nq, nr)
  real(wp) :: fcn_6d(nx, ny, nz, nq, nr, ns)

  type(linear_interp_1d) :: s1
  type(linear_interp_2d) :: s2
  type(linear_interp_3d) :: s3
  type(linear_interp_4d) :: s4
  type(linear_interp_5d) :: s5
  type(linear_interp_6d) :: s6

contains

  @test
  subroutine test_all_the_things()

    real(wp) :: tolerance, rnd
    real(wp), dimension(6) :: interpolated_value, actual_value, errmax
    logical :: fail
    integer :: i, j, k, l, m, n
    integer, dimension(6) :: iflag

    fail = .false.
    tolerance = 1.0e-14_wp
    do i = 1, nx
      x(i) = dble(i - 1) / dble(nx - 1)
    enddo
    do j = 1, ny
      y(j) = dble(j - 1) / dble(ny - 1)
    enddo
    do k = 1, nz
      z(k) = dble(k - 1) / dble(nz - 1)
    enddo
    do l = 1, nq
      q(l) = dble(l - 1) / dble(nq - 1)
    enddo
    do m = 1, nr
      r(m) = dble(m - 1) / dble(nr - 1)
    enddo
    do n = 1, ns
      s(n) = dble(n - 1) / dble(ns - 1)
    enddo
    do i = 1, nx
      fcn_1d(i) = f1(x(i))
      do j = 1, ny
        fcn_2d(i, j) = f2(x(i), y(j))
        do k = 1, nz
          fcn_3d(i, j, k) = f3(x(i), y(j), z(k))
          do l = 1, nq
            fcn_4d(i, j, k, l) = f4(x(i), y(j), z(k), q(l))
            do m = 1, nr
              fcn_5d(i, j, k, l, m) = f5(x(i), y(j), z(k), q(l), r(m))
              do n = 1, ns
                fcn_6d(i, j, k, l, m, n) = f6(x(i), y(j), z(k), q(l), r(m), s(n))
              enddo
            enddo
          enddo
        enddo
      enddo
    enddo

    ! initialize
    call s1%initialize(x, fcn_1d, iflag(1))
    if(iflag(1) /= 0) error stop 'Error initializing 1D interpolator'

    call s2%initialize(x, y, fcn_2d, iflag(2))
    if(iflag(2) /= 0) error stop 'Error initializing 2D interpolator'

    call s3%initialize(x, y, z, fcn_3d, iflag(3))
    if(iflag(3) /= 0) error stop 'Error initializing 3D interpolator'

    call s4%initialize(x, y, z, q, fcn_4d, iflag(4))
    if(iflag(4) /= 0) error stop 'Error initializing 4D interpolator'

    call s5%initialize(x, y, z, q, r, fcn_5d, iflag(5))
    if(iflag(5) /= 0) error stop 'Error initializing 5D interpolator'

    call s6%initialize(x, y, z, q, r, s, fcn_6d, iflag(6))
    if(iflag(6) /= 0) error stop 'Error initializing 6D interpolator'

    ! compute max error at interpolation points

    errmax = 0.0_wp
    do i = 1, nx
      call random_number(rnd); rnd = (rnd - 0.5_wp) / 100.0_wp
      call s1%evaluate(x(i) + rnd, interpolated_value(1))
      actual_value(1) = f1(x(i) + rnd)

      @assertEqual(actual_value(1), interpolated_value(1), tolerance)

      do j = 1, ny
        call random_number(rnd); rnd = rnd / 100.0_wp
        call s2%evaluate(x(i) + rnd, y(j) + rnd, interpolated_value(2))
        actual_value(2) = f2(x(i) + rnd, y(j) + rnd)

        @assertEqual(actual_value(2), interpolated_value(2), tolerance)

        do k = 1, nz
          call random_number(rnd); rnd = rnd / 100.0_wp
          call s3%evaluate(x(i) + rnd, y(j) + rnd, z(k) + rnd, interpolated_value(3))
          actual_value(3) = f3(x(i) + rnd, y(j) + rnd, z(k) + rnd)

          @assertEqual(actual_value(3), interpolated_value(3), tolerance)

          do l = 1, nq
            call random_number(rnd); rnd = rnd / 100.0_wp
            call s4%evaluate(x(i) + rnd, y(j) + rnd, z(k) + rnd, q(l) + rnd, interpolated_value(4))
            actual_value(4) = f4(x(i) + rnd, y(j) + rnd, z(k) + rnd, q(l) + rnd)

            @assertEqual(actual_value(4), interpolated_value(4), tolerance)

            do m = 1, nr
              call random_number(rnd); rnd = rnd / 100.0_wp
              call s5%evaluate(x(i) + rnd, y(j) + rnd, z(k) + rnd, q(l) + rnd, r(m) + rnd, interpolated_value(5))
              actual_value(5) = f5(x(i) + rnd, y(j) + rnd, z(k) + rnd, q(l) + rnd, r(m) + rnd)

              @assertEqual(actual_value(5), interpolated_value(5), tolerance)

              do n = 1, ns
                call random_number(rnd); rnd = rnd / 100.0_wp
                call s6%evaluate(x(i) + rnd, y(j) + rnd, z(k) + rnd, q(l) + rnd, r(m) + rnd, s(n) + rnd, interpolated_value(6))
                actual_value(6) = f6(x(i) + rnd, y(j) + rnd, z(k) + rnd, q(l) + rnd, r(m) + rnd, s(n) + rnd)

                @assertEqual(actual_value(6), interpolated_value(6), tolerance)
              enddo
            enddo
          enddo
        enddo
      enddo
    enddo

  endsubroutine test_all_the_things

  real(wp) function f1(x)
    !< 1d test function
    implicit none
    real(wp), intent(in) :: x
    f1 = x + x + x + x + x + x
  endfunction f1

  real(wp) function f2(x, y)
    !< 2d test function
    implicit none
    real(wp), intent(in) :: x, y
    f2 = x + y + x + y + x + y
  endfunction f2

  real(wp) function f3(x, y, z)
    !< 3d test function
    implicit none
    real(wp), intent(in) :: x, y, z
    f3 = x + y + z + x + y + z
  endfunction f3

  real(wp) function f4(x, y, z, q)
    !< 4d test function
    implicit none
    real(wp), intent(in) ::  x, y, z, q
    f4 = x + y + z + q + x + y
  endfunction f4

  real(wp) function f5(x, y, z, q, r)
    !< 5d test function
    implicit none
    real(wp), intent(in) ::  x, y, z, q, r
    f5 = x + y + z + q + r + x
  endfunction f5

  real(wp) function f6(x, y, z, q, r, s)
    !< 6d test function
    implicit none
    real(wp), intent(in) ::  x, y, z, q, r, s
    f6 = x + y + z + q + r + s
  endfunction f6

endmodule test_linear_interp
