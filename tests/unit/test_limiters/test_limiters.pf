module test_limiters
  use, intrinsic :: iso_fortran_env, only: ik => int32, rk => real64
  use mod_slope_limiter, only: slope_limiter_t
  use mod_flux_limiter, only: flux_limiter_t
  use funit
  implicit none

contains

  @test
  subroutine test_basic_flux_limiters()

    type(flux_limiter_t) :: limiter

    limiter = flux_limiter_t(name='minmod')
    @assertEqual(0.0_rk, limiter%limit(-1.0_rk))
    @assertEqual(0.0_rk, limiter%limit(0.0_rk))
    @assertEqual(1.0_rk, limiter%limit(1.0_rk))
    @assertEqual(1.0_rk, limiter%limit(4.0_rk))
    @assertEqual('minmod', limiter%name)

    limiter = flux_limiter_t(name='van_leer')
    @assertEqual(0.0_rk, limiter%limit(-1.0_rk))
    @assertEqual(0.0_rk, limiter%limit(0.0_rk))
    @assertEqual(1.0_rk, limiter%limit(1.0_rk))
    @assertEqual('van_leer', limiter%name)

    limiter = flux_limiter_t(name='superbee')
    @assertEqual(0.0_rk, limiter%limit(-1.0_rk))
    @assertEqual(0.0_rk, limiter%limit(0.0_rk))
    @assertEqual(1.0_rk, limiter%limit(0.5_rk))
    @assertEqual(1.0_rk, limiter%limit(1.0_rk))
    @assertEqual(2.0_rk, limiter%limit(2.0_rk))
    @assertEqual(2.0_rk, limiter%limit(4.0_rk))
    @assertEqual('superbee', limiter%name)
  end subroutine test_basic_flux_limiters

end module test_limiters
