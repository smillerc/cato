module test_gradients
  use, intrinsic :: iso_fortran_env, only: ik => int32, rk => real64
  use mod_gradients
  use mod_grid_factory, only: grid_factory
  use mod_grid, only: grid_t
  use mod_input, only: input_t
  use funit

  implicit none

  integer(ik), parameter :: ni_nodes = 5
  integer(ik), parameter :: nj_nodes = 5
  integer(ik), parameter :: ni_cells = ni_nodes - 1
  integer(ik), parameter :: nj_cells = nj_nodes - 1
  real(rk), parameter :: xmin = -2.0_rk
  real(rk), parameter :: xmax = 2.0_rk
  real(rk), parameter :: ymin = -2.0_rk
  real(rk), parameter :: ymax = 2.0_rk
  integer(ik) :: alloc_stat
  integer(ik), parameter :: C1 = 1
  integer(ik), parameter :: M1 = 2
  integer(ik), parameter :: C2 = 3
  integer(ik), parameter :: M2 = 4
  integer(ik), parameter :: C3 = 5
  integer(ik), parameter :: M3 = 6
  integer(ik), parameter :: C4 = 7
  integer(ik), parameter :: M4 = 8

  class(grid_t), pointer :: grid
  type(input_t) :: input

contains

  @before
  subroutine before()
    input = input_t(cell_reconstruction='piecewise_linear', &
                    edge_interpolation_scheme='TVD2', &
                    limiter='none', &
                    gradient_scheme='green_gauss', &
                    ni_nodes=ni_nodes, nj_nodes=nj_nodes, &
                    read_init_cond_from_file=.false., &
                    xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax)
    grid => grid_factory(input)
  end subroutine

  @after
  subroutine after()
    deallocate(grid)
  end subroutine

  @test
  subroutine test_sgg_gradient()

    ! real(rk), dimension(0:ni_cells-1, 0:nj_cells-1) :: rho = 0.0_rk
    real(rk), dimension(0:ni_cells - 1, 0:nj_cells - 1) :: grad_x = 0.0_rk
    real(rk), dimension(0:ni_cells - 1, 0:nj_cells - 1) :: grad_y = 0.0_rk
    real(rk), dimension(1:4, 0:ni_cells - 1, 0:nj_cells - 1) :: edge_vars = 0.0_rk
    integer(ik) :: i, j

    write(*, *) "Testing the standard Green-Gauss gradient reconstruction"

    !           Domain           -->     Primitive Variable (rho)
    ! |-------||-------|-------||-------|  -->  |-------||-------|-------||-------|
    ! | (0,3) || (1,3) | (2,3) || (3,3) |  -->  |   1   ||   2   |   3   ||   4   |
    ! |=======||=======|=======||=======|  -->  |=======||=======|=======||=======|
    ! | (0,2) || (1,2) | (2,2) || (3,2) |  -->  |   1   ||   2   |   3   ||   4   |
    ! |-------||-------|-------||-------|  -->  |-------||-------|-------||-------|
    ! | (0,1) || (1,1) | (2,1) || (3,1) |  -->  |   1   ||   2   |   3   ||   4   |
    ! |=======||=======|=======||=======|  -->  |=======||=======|=======||=======|
    ! | (0,0) || (1,0) | (2,0) || (3,0) |  -->  |   1   ||   2   |   3   ||   4   |
    ! |-------||-------|-------||-------|  -->  |-------||-------|-------||-------|

    edge_vars(1, 0, :) = 1.0_rk ! bottom
    edge_vars(2, 0, :) = 1.5_rk ! right
    edge_vars(3, 0, :) = 1.0_rk ! top
    edge_vars(4, 0, :) = 0.5_rk ! left

    edge_vars(1, 1, :) = 2.0_rk ! bottom
    edge_vars(2, 1, :) = 2.5_rk ! right
    edge_vars(3, 1, :) = 2.0_rk ! top
    edge_vars(4, 1, :) = 1.5_rk ! left

    edge_vars(1, 2, :) = 3.0_rk ! bottom
    edge_vars(2, 2, :) = 3.5_rk ! right
    edge_vars(3, 2, :) = 3.0_rk ! top
    edge_vars(4, 2, :) = 2.5_rk ! left

    edge_vars(1, 3, :) = 4.0_rk ! bottom
    edge_vars(2, 3, :) = 4.5_rk ! right
    edge_vars(3, 3, :) = 4.0_rk ! top
    edge_vars(4, 3, :) = 3.5_rk ! left

    call green_gauss_gradient(edge_vars, lbounds=lbound(edge_vars), &
                              grid=grid, grad_x=grad_x, grad_y=grad_y, &
                              name='rho', stage_name='rho_test')

    ! Only (1,1) will have a gradient, all other zones are ghost
    @assertEqual(1.0_rk, grad_x(1:2, 1:2))
    @assertEqual(0.0_rk, grad_y(1:2, 1:2))

    print *, 'grad x'
    do j = nj_cells - 1, 0, -1
      write(*, '(a, i0, a, 5(es16.6))') 'grad_x(:,', j, ') -> ', grad_x(:, j)
    end do
    print *
    print *, 'grad y'
    do j = nj_cells - 1, 0, -1
      write(*, '(a, i0, a, 5(es16.6))') 'grad_y(:,', j, ') -> ', grad_y(:, j)
    end do

  end subroutine test_sgg_gradient

end module test_gradients
