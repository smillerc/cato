module test_reconstruction
  use, intrinsic :: iso_fortran_env, only: ik => int32, rk => real64
  use mod_input, only: input_t
  use mod_abstract_reconstruction, only: abstract_reconstruction_t
  use mod_reconstruction_factory, only: reconstruction_factory
  use mod_edge_interpolator, only: edge_iterpolator_t
  use mod_edge_interpolator_factory, only: edge_interpolator_factory
  use mod_tvd_2nd_order, only: tvd_2nd_order_t
  use mod_tvd_3rd_order, only: tvd_3rd_order_t
  use mod_tvd_5th_order, only: tvd_5th_order_t
  ! use mod_mlp_3rd_order, only: mlp_3rd_order_t
  ! use mod_mlp_5th_order, only: mlp_5th_order_t
  use mod_grid_factory, only: grid_factory
  use mod_grid_block, only: grid_block_t
  use funit

  implicit none

  integer(ik), parameter :: n_ghost_layers = 2
  integer(ik), parameter :: ni_nodes = 5
  integer(ik), parameter :: nj_nodes = 5
  integer(ik), parameter :: ni_cells = ni_nodes - 1
  integer(ik), parameter :: nj_cells = nj_nodes - 1
  real(rk), parameter :: xmin = -2.0_rk
  real(rk), parameter :: xmax = 2.0_rk
  real(rk), parameter :: ymin = -2.0_rk
  real(rk), parameter :: ymax = 2.0_rk
  integer(ik) :: alloc_stat
  integer(ik), parameter :: C1 = 1
  integer(ik), parameter :: M1 = 2
  integer(ik), parameter :: C2 = 3
  integer(ik), parameter :: M2 = 4
  integer(ik), parameter :: C3 = 5
  integer(ik), parameter :: M3 = 6
  integer(ik), parameter :: C4 = 7
  integer(ik), parameter :: M4 = 8

  class(grid_block_t), pointer :: grid
  class(abstract_reconstruction_t), allocatable :: reconstruction_operator
  type(input_t) :: input

  integer(ik), parameter :: ilo_c = -n_ghost_layers + 1
  integer(ik), parameter :: ihi_c = ni_cells + n_ghost_layers
  integer(ik), parameter :: jlo_c = -n_ghost_layers + 1
  integer(ik), parameter :: jhi_c = nj_cells + n_ghost_layers
  real(rk), dimension(ilo_c:ihi_c, jlo_c:jhi_c) :: rho = 0.0_rk
  real(rk), dimension(ilo_c:ihi_c, jlo_c:jhi_c) :: u = 0.0_rk
  real(rk), dimension(ilo_c:ihi_c, jlo_c:jhi_c) :: v = 0.0_rk
  real(rk), dimension(ilo_c:ihi_c, jlo_c:jhi_c) :: p = 0.0_rk

  real(rk), dimension(1:8, ilo_c:ihi_c, jlo_c:jhi_c) :: recon_rho
  real(rk), dimension(1:8, ilo_c:ihi_c, jlo_c:jhi_c) :: recon_u
  real(rk), dimension(1:8, ilo_c:ihi_c, jlo_c:jhi_c) :: recon_v
  real(rk), dimension(1:8, ilo_c:ihi_c, jlo_c:jhi_c) :: recon_p

contains

  @before
  subroutine before()
  endsubroutine

  @after
  subroutine after()
    if(associated(grid)) deallocate(grid)
    if(allocated(reconstruction_operator)) deallocate(reconstruction_operator)
  endsubroutine

  @test
  subroutine test_tvd2_none()

    class(edge_iterpolator_t), pointer :: edge_interpolator => null()
    real(rk), dimension(:, :, :), allocatable :: edge_vars
    integer(ik) :: i, j

    write(*, *) "Testing the TVD2 edge iterpolation and 'none' flux limiter"
    input%spatial_reconstruction = 'TVD2'
    input%limiter = 'none'
    edge_interpolator => edge_interpolator_factory(input)

    !                Domain           -->                Primitive Variable
    ! |-------||-------|-------||-------|  -->  |-------||-------|-------||-------|
    ! | (0,3) || (1,3) | (2,3) || (3,3) |  -->  |   1   ||   2   |   3   ||   4   |
    ! |=======||=======|=======||=======|  -->  |=======||=======|=======||=======|
    ! | (0,2) || (1,2) | (2,2) || (3,2) |  -->  |   1   ||   2   |   3   ||   4   |
    ! |-------||-------|-------||-------|  -->  |-------||-------|-------||-------|
    ! | (0,1) || (1,1) | (2,1) || (3,1) |  -->  |   1   ||   2   |   3   ||   4   |
    ! |=======||=======|=======||=======|  -->  |=======||=======|=======||=======|
    ! | (0,0) || (1,0) | (2,0) || (3,0) |  -->  |   1   ||   2   |   3   ||   4   |
    ! |-------||-------|-------||-------|  -->  |-------||-------|-------||-------|

    rho(-1, :) = 1.0_rk ! ghost
    rho(0, :) = 1.0_rk  ! ghost
    rho(1, :) = 2.0_rk
    rho(2, :) = 3.0_rk
    rho(3, :) = 4.0_rk ! ghost
    rho(4, :) = 4.0_rk ! ghost
    ! print*, lbound(rho)
    ! print*, ubound(rho)

    ! print*, 'density'
    ! do i = lbound(rho, dim=1), ubound(rho, dim=1)
    !   do j = lbound(rho, dim=2), ubound(rho, dim=2)
    !     write(*, '(4(es16.6))') rho(i, j)
    !   end do
    !   end do

    call edge_interpolator%interpolate_edge_values(q=rho, lbounds=lbound(rho), edge_values=edge_vars)
    ! print*, lbound(edge_vars)
    ! print*, ubound(edge_vars)

    i = 2
    j = 2
    associate(cell_ave => rho(i, j), &
              E1 => edge_vars(1, i, j), &
              E2 => edge_vars(2, i, j), &
              E3 => edge_vars(3, i, j), &
              E4 => edge_vars(4, i, j))
      write(*, '(a)') "*********************************************"
      write(*, '(a)') "Interpolated edge state for: rho"
      write(*, '(a)') "*********************************************"
      write(*, *)
      write(*, '(16x,es11.3)') E3
      write(*, *) "           C---------E3---------C"
      write(*, *) "           |                    |"
      write(*, *) "           |                    |"
      write(*, '((12x,a,es11.3,a))') "|    ", cell_ave, "     |"
      write(*, '(2(es11.3,a))') E4, " E4       (i,j)      E2", E2
      write(*, *) "           |                    |"
      write(*, *) "           |                    |"
      write(*, *) "           |                    |"
      write(*, *) "           C---------E1---------C"
      write(*, '(16x,es11.3)') E1
      write(*, *)

    endassociate

    ! do i = lbound(edge_vars, dim=2), ubound(edge_vars, dim=2)
    ! do j = lbound(edge_vars, dim=3), ubound(edge_vars, dim=3)
    !   write(*, '(4(es16.6))') edge_vars(:, i, j)
    ! end do
    ! end do

    i = 2
    j = 2
    @assertEqual(3.0_rk, edge_vars(1, i, j))
    @assertEqual(3.5_rk, edge_vars(2, i, j))
    @assertEqual(3.0_rk, edge_vars(3, i, j))
    @assertEqual(2.5_rk, edge_vars(4, i, j))

    deallocate(edge_vars)
    deallocate(edge_interpolator)
  endsubroutine test_tvd2_none

  ! @test
  subroutine test_tvd3()

    class(edge_iterpolator_t), allocatable :: edge_interpolator
    real(rk), dimension(:, :, :), allocatable :: edge_vars
    integer(ik) :: i, j

    write(*, *) "Testing the TVD3 edge iterpolation"
    allocate(tvd_3rd_order_t :: edge_interpolator)
    call edge_interpolator%initialize(limiter='none')

    !                Domain           -->                Primitive Variable
    ! |-------||-------|-------||-------|  -->  |-------||-------|-------||-------|
    ! | (0,3) || (1,3) | (2,3) || (3,3) |  -->  |   1   ||   2   |   3   ||   4   |
    ! |=======||=======|=======||=======|  -->  |=======||=======|=======||=======|
    ! | (0,2) || (1,2) | (2,2) || (3,2) |  -->  |   1   ||   2   |   3   ||   4   |
    ! |-------||-------|-------||-------|  -->  |-------||-------|-------||-------|
    ! | (0,1) || (1,1) | (2,1) || (3,1) |  -->  |   1   ||   2   |   3   ||   4   |
    ! |=======||=======|=======||=======|  -->  |=======||=======|=======||=======|
    ! | (0,0) || (1,0) | (2,0) || (3,0) |  -->  |   1   ||   2   |   3   ||   4   |
    ! |-------||-------|-------||-------|  -->  |-------||-------|-------||-------|

    rho(0, :) = 1.0_rk
    rho(1, :) = 2.0_rk
    rho(2, :) = 3.0_rk
    rho(3, :) = 4.0_rk

    call edge_interpolator%interpolate_edge_values(q=rho, &
                                                   lbounds=lbound(rho), &
                                                   edge_values=edge_vars)

    i = 2
    j = 2
    associate(cell_ave => rho(i, j), &
              E1 => edge_vars(1, i, j), &
              E2 => edge_vars(2, i, j), &
              E3 => edge_vars(3, i, j), &
              E4 => edge_vars(4, i, j))
      write(*, '(a)') "*********************************************"
      write(*, '(a)') "Interpolated edge state for: rho"
      write(*, '(a)') "*********************************************"
      write(*, *)
      write(*, '(16x,es11.3)') E3
      write(*, *) "           C---------E3---------C"
      write(*, *) "           |                    |"
      write(*, *) "           |                    |"
      write(*, '((12x,a,es11.3,a))') "|    ", cell_ave, "     |"
      write(*, '(2(es11.3,a))') E4, " E4       (i,j)      E2", E2
      write(*, *) "           |                    |"
      write(*, *) "           |                    |"
      write(*, *) "           |                    |"
      write(*, *) "           C---------E1---------C"
      write(*, '(16x,es11.3)') E1
      write(*, *)

    endassociate

    @assertEqual(3.0_rk, edge_vars(1, i, j))
    @assertEqual(3.5_rk, edge_vars(2, i, j))
    @assertEqual(3.0_rk, edge_vars(3, i, j))
    @assertEqual(2.5_rk, edge_vars(4, i, j))

  endsubroutine test_tvd3

  ! @test
  ! subroutine test_mlp3()

  !   class(edge_iterpolator_t), allocatable :: edge_interpolator
  !   real(rk), dimension(:, :, :), allocatable :: edge_vars
  !   integer(ik) :: i, j

  !   write(*, *) "Testing the MLP3 edge iterpolation"
  !   allocate(mlp_3rd_order_t :: edge_interpolator)
  !   call edge_interpolator%initialize(limiter='none')

  !   !                Domain           -->                Primitive Variable
  !   ! |-------||-------|-------||-------|  -->  |-------||-------|-------||-------|
  !   ! | (0,3) || (1,3) | (2,3) || (3,3) |  -->  |   1   ||   2   |   3   ||   4   |
  !   ! |=======||=======|=======||=======|  -->  |=======||=======|=======||=======|
  !   ! | (0,2) || (1,2) | (2,2) || (3,2) |  -->  |   1   ||   2   |   3   ||   4   |
  !   ! |-------||-------|-------||-------|  -->  |-------||-------|-------||-------|
  !   ! | (0,1) || (1,1) | (2,1) || (3,1) |  -->  |   1   ||   2   |   3   ||   4   |
  !   ! |=======||=======|=======||=======|  -->  |=======||=======|=======||=======|
  !   ! | (0,0) || (1,0) | (2,0) || (3,0) |  -->  |   1   ||   2   |   3   ||   4   |
  !   ! |-------||-------|-------||-------|  -->  |-------||-------|-------||-------|

  !   rho(0, :) = 1.0_rk
  !   rho(1, :) = 2.0_rk
  !   rho(2, :) = 3.0_rk
  !   rho(3, :) = 4.0_rk

  !   call edge_interpolator%interpolate_edge_values(q=rho, &
  !                                                  lbounds=lbound(rho), &
  !                                                  edge_values=edge_vars)

  !   i = 2
  !   j = 2
  !   associate(cell_ave => rho(i, j), &
  !             E1 => edge_vars(1, i, j), &
  !             E2 => edge_vars(2, i, j), &
  !             E3 => edge_vars(3, i, j), &
  !             E4 => edge_vars(4, i, j))
  !     write(*, '(a)') "*********************************************"
  !     write(*, '(a)') "Interpolated edge state for: rho"
  !     write(*, '(a)') "*********************************************"
  !     write(*, *)
  !     write(*, '(16x,es11.3)') E3
  !     write(*, *) "           C---------E3---------C"
  !     write(*, *) "           |                    |"
  !     write(*, *) "           |                    |"
  !     write(*, '((12x,a,es11.3,a))') "|    ", cell_ave, "     |"
  !     write(*, '(2(es11.3,a))') E4, " E4       (i,j)      E2", E2
  !     write(*, *) "           |                    |"
  !     write(*, *) "           |                    |"
  !     write(*, *) "           |                    |"
  !     write(*, *) "           C---------E1---------C"
  !     write(*, '(16x,es11.3)') E1
  !     write(*, *)

  !   end associate

  !   @assertEqual(3.0_rk, edge_vars(1, i, j))
  !   @assertEqual(3.5_rk, edge_vars(2, i, j))
  !   @assertEqual(3.0_rk, edge_vars(3, i, j))
  !   @assertEqual(2.5_rk, edge_vars(4, i, j))

  ! end subroutine test_mlp3
endmodule test_reconstruction
