module test_slope_limiters
  use, intrinsic :: iso_fortran_env, only: ik => int32, rk => real64
  use mod_slope_limiter, only: slope_limiter_t

  use funit
  implicit none

contains

  @test
  subroutine test_basic()

    type(slope_limiter_t) :: limiter

    limiter = slope_limiter_t(name='barth_jesperson')
    @assertEqual(0.0_rk, limiter%limit(f=0.0_rk))
    @assertEqual(1.0_rk, limiter%limit(f=0.5_rk))
    @assertEqual(0.0_rk, limiter%limit(f=1.0_rk))
    @assertEqual('barth_jesperson', limiter%name)

    limiter = slope_limiter_t(name='minmod')
    @assertEqual(0.0_rk, limiter%limit(f=0.0_rk))
    @assertEqual(1.0_rk, limiter%limit(f=0.5_rk))
    @assertEqual(0.0_rk, limiter%limit(f=1.0_rk))
    @assertEqual('minmod', limiter%name)

    limiter = slope_limiter_t(name='van_leer')
    @assertEqual(0.0_rk, limiter%limit(f=0.0_rk))
    @assertEqual(1.0_rk, limiter%limit(f=0.5_rk))
    @assertEqual(0.0_rk, limiter%limit(f=1.0_rk))
    @assertEqual('van_leer', limiter%name)

    limiter = slope_limiter_t(name='sine')
    @assertEqual(0.0_rk, limiter%limit(f=0.0_rk), 1e-10_rk)
    @assertEqual(1.0_rk, limiter%limit(f=0.5_rk), 1e-10_rk)
    @assertEqual(0.0_rk, limiter%limit(f=1.0_rk), 1e-10_rk)
    @assertEqual('sine', limiter%name)

    limiter = slope_limiter_t(name='van_albada')
    @assertEqual(0.0_rk, limiter%limit(f=0.0_rk))
    @assertEqual(1.0_rk, limiter%limit(f=0.5_rk))
    @assertEqual(0.0_rk, limiter%limit(f=1.0_rk))
    @assertEqual('van_albada', limiter%name)
  end subroutine test_basic

end module test_slope_limiters
