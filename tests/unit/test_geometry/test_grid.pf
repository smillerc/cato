module test_grid
  use iso_fortran_env, only : ik => int32, rk => real64
  use mod_grid, only : grid_t
  use mod_input, only : input_t
  use funit
  implicit none


  class(grid_t), allocatable :: grid
  class(input_t), allocatable :: input

contains

  @before
  subroutine init_grid()
    allocate(input_t :: input)
    call input%initialize(ni=5_ik, nj=3_ik, &
                          xmin=-2.0_rk, xmax=2.0_rk, ymin=-2.0_rk, ymax=2.0_rk)

    allocate(grid_t :: grid)
    call grid%initialize(input)
  end subroutine init_grid

  @test
  subroutine test_grid_info()
    @assertEqual(5, grid%get_ni())
    @assertEqual(3, grid%get_nj())
    
    @assertEqual(1, grid%get_ilo())
    @assertEqual(5, grid%get_ihi())

    @assertEqual(1, grid%get_jlo())
    @assertEqual(3, grid%get_jhi())

    @assertEqual(1.0_rk, grid%get_dx())
    @assertEqual(2.0_rk, grid%get_dy())

    @assertEqual([-2.0_rk, 0.0_rk, 2.0_rk], [grid%get_y(1,1), grid%get_y(1,2), grid%get_y(1,3)])
    @assertEqual([-2.0_rk, -1.0_rk, 0.0_rk, 1.0_rk, 2.0_rk], [grid%get_x(1,1), grid%get_x(2,1), grid%get_x(3,1), grid%get_x(4,1), grid%get_x(5,1)])

    @assertEqual([-1.5_rk, -1.0_rk], [grid%get_cell_centroids(1,1,1), grid%get_cell_centroids(1,1,2)])

    @assertEqual(2.0_rk, grid%get_cell_volumes(1,1))
  end subroutine test_grid_info

  @after
  subroutine test_grid_finalize()
    call grid%finalize()
  end subroutine test_grid_finalize

end module test_grid