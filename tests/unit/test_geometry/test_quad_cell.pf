module test_quad_cell
  use iso_fortran_env, only: rk => real64
  use mod_quad_cell, only: quad_cell_t
  use funit
  implicit none

contains

  @test
  subroutine test_quad_cell_stats()

    !                     F3
    !                     M3
    !            (0,1)-----o-----(1,1)
    !              |                |
    !      F4   M4 o        C       o M2   F2
    !              |               |
    !            (0,0)-----o-----(1,0)
    !                     M1
    !                     F1
    ! N: node or vertex
    ! F: face or edge
    ! M: midpoint of the edge (o)
    ! C: cell or control volume (in finite-volume lingo)

    class(quad_cell_t), allocatable :: cell
    real(rk), dimension(4) :: x = [0.0_rk, 1.0_rk, 1.0_rk, 0.0_rk]
    real(rk), dimension(4) :: y = [0.0_rk, 0.0_rk, 1.0_rk, 1.0_rk]
    real(rk), dimension(2, 4, 2) :: cell_node_xy !< ((x,y), (point_1:point_4), (corner=1, midpoint=2))

    allocate(quad_cell_t :: cell)
    call cell%initialize(x_coords=x, y_coords=y)

    ! Volume
    @assertEqual(1., cell%volume)

    ! Edge lengths
    @assertEqual(1.0_rk, cell%edge_lengths(1))
    @assertEqual(1.0_rk, cell%edge_lengths(2))
    @assertEqual(1.0_rk, cell%edge_lengths(3))
    @assertEqual(1.0_rk, cell%edge_lengths(4))

    ! Mid-points
    @assertEqual([0.5_rk, 0.0_rk], cell%edge_midpoints(:, 1))
    @assertEqual([1.0_rk, 0.5_rk], cell%edge_midpoints(:, 2))
    @assertEqual([0.5_rk, 1.0_rk], cell%edge_midpoints(:, 3))
    @assertEqual([0.0_rk, 0.5_rk], cell%edge_midpoints(:, 4))

    ! Normal vectors (should have length 1 too)
    ! Note: the midpoint of the edge should be the tail of the norm vector
    ! The following asserts test the location of the tail (midpoint of face), and tail of length 1 away
    @assertEqual([0.0_rk, -1.0_rk], cell%edge_norm_vectors(:, 1))
    @assertEqual([1.0_rk, 0.0_rk], cell%edge_norm_vectors(:, 2))
    @assertEqual([0.0_rk, 1.0_rk], cell%edge_norm_vectors(:, 3))
    @assertEqual([-1.0_rk, 0.0_rk], cell%edge_norm_vectors(:, 4))

    ! Cell node/midoint set
    !< ((x,y), (point_1:point_4), (corner=1, midpoint=2))
    cell_node_xy(1, :, 1) = [0.0_rk, 1.0_rk, 1.0_rk, 0.0_rk]
    cell_node_xy(2, :, 1) = [0.0_rk, 0.0_rk, 1.0_rk, 1.0_rk]

    cell_node_xy(1, :, 2) = [0.5_rk, 1.0_rk, 0.5_rk, 0.0_rk]
    cell_node_xy(2, :, 2) = [0.0_rk, 0.5_rk, 1.0_rk, 0.5_rk]

    @assertEqual(cell_node_xy, cell%get_cell_node_xy_set())

  end subroutine test_quad_cell_stats

end module test_quad_cell
