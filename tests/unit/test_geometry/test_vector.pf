module test_vector
  use iso_fortran_env, only : ik => int32, rk => real64
  use mod_vector
  use funit
  implicit none


contains

  @test
  subroutine test_vector_stats()
    type(vector_t) :: vec, norm_vec

    vec = vector_t(x=[1.0_rk,5.0_rk], y=[1.0_rk,4.0_rk])
    @assertEqual(5.0_rk, vec%length)

    norm_vec = .unitnorm. vec
    @assertEqual(1.0_rk, norm_vec%length)

  end subroutine test_vector_stats

  @test
  subroutine test_from_2d()
    type(vector_t) :: vec2d, vec1d

    vec2d = vector_t(x=[1.0_rk,3.0_rk], y=[1.0_rk,3.0_rk])
    vec1d = vector_t(x=2.0_rk, y=2.0_rk)
    @assertEqual(vec2d%length, vec1d%length)

  end subroutine test_from_2d

  @test
  subroutine test_cross_product()
    type(vector_t) :: vec1, vec2

    vec1 = vector_t(x=2, y=2)
    vec2 = vector_t(x=1, y=5)

    @assertEqual(8.0_rk, vec1 .cross. vec2)
  end subroutine test_cross_product

  @test
  subroutine test_dot_product()
    type(vector_t) :: vec1, vec2

    vec1 = vector_t(x=2, y=2)
    vec2 = vector_t(x=1, y=5)

    @assertEqual(12.0_rk, vec1 .dot. vec2)
  end subroutine test_dot_product

end module test_vector
