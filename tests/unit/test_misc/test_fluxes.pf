module test_fluxes
  use, intrinsic :: iso_fortran_env, only: ik => int32, rk => real64
  use mod_flux_tensor, only: operator(.dot.), H => flux_tensor_t
  use funit

  implicit none

  real(rk) :: gamma = 5.0_rk / 3.0_rk

contains

  @test
  subroutine test_fvleg_operators()

    real(rk), dimension(4) :: U !< (rho, u, v, p)
    type(H) :: flux_vector_1, flux_vector_2, flux_vector_3
    real(rk) :: E, internal_energy

    U = [2.0_rk, 3.0_rk, 4.0_rk, 5.0_rk]

    flux_vector_1 = H(U)

    internal_energy = (U(4) / U(1)) / (gamma - 1)
    E = U(1) * (internal_energy + 0.5_rk * (U(2)**2 + U(3)**2)) ! total energy

    ! Fi
    ! H(1, :) = [rho * u, rho * u**2 + p, rho * u * v,(E + p) * u]
    @assertEqual([6.0_rk, 23.0_rk, 24.0_rk,(E + U(4)) * U(2)], flux_vector_1%state(1, :))

    ! Gj
    ! H(2, :) = [rho * v, rho * u * v, rho * v**2 + p,(E + p) * v]
    @assertEqual([8.0_rk, 24.0_rk, 37.0_rk,(E + U(4)) * U(3)], flux_vector_1%state(2, :))

    ! Test operators = and *
    flux_vector_2 = 2.0_rk * flux_vector_1
    @assertEqual(flux_vector_2%state, flux_vector_1%state * 2.0_rk)

    ! Test operators = and /
    flux_vector_2 = flux_vector_1 / 2.0_rk
    @assertEqual(flux_vector_2%state, flux_vector_1%state / 2.0_rk)

    ! Test operators = and +
    flux_vector_3 = flux_vector_1 + flux_vector_2
    @assertEqual(flux_vector_3%state, flux_vector_1%state + flux_vector_2%state)

    ! Test operators = and -
    flux_vector_3 = flux_vector_1 - flux_vector_2
    @assertEqual(flux_vector_3%state, flux_vector_1%state - flux_vector_2%state)

  end subroutine

  @test
  subroutine test_vector_flux_dot()
    real(rk), dimension(4) :: primitive_vars !< (rho, u, v, p)
    real(rk), dimension(4) :: H_dot_n, H_dot_n_actual
    type(H) :: flux_vector_1
    real(rk) :: e
    real(rk), dimension(2) :: normal_vector

    H_dot_n = 0.0_rk
    normal_vector = [6.0_rk, 7.0_rk]
    associate(rho=>2.0_rk, u=>3.0_rk, v=>4.0_rk, p=>5.0_rk, &
              gamma=>(5.0_rk / 3.0_rk), n=>normal_vector)

      ! e = (p/(gamma - 1.0_rk)) + 0.5_rk*rho*(u**2 + v**2)
      e = 0.5_rk * rho * (u**2 + v**2) + (p / (gamma - 1.0_rk))
      primitive_vars = [rho, u, v, p]
      H_dot_n_actual = [(rho * u) * n(1) + (rho * v) * n(2), &
                        (rho * u**2 + p) * n(1) + (rho * u * v) * n(2), &
                        (rho * u * v) * n(1) + (rho * v**2 + p) * n(2), &
                        ((e + p) * u) * n(1) + ((e + p) * v) * n(2)]
    end associate

    flux_vector_1 = H(primitive_vars)

    H_dot_n = flux_vector_1.dot.normal_vector
    print *, H_dot_n
    print *, H_dot_n_actual
    @assertEqual(H_dot_n_actual, H_dot_n)

  end subroutine

end module test_fluxes
