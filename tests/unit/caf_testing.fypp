#:def ranksuffix(RANK)
$:'' if RANK == 0 else '(' + ':' + ',:' * (RANK - 1) + ')'
#:enddef ranksuffix
#:def rankindex(RANK)
$:'' if RANK == 0 else '(' + ','.join(['i'+str(n) for n in range(1,RANK + 1)]) + ')'
#:enddef rankindex
#:def indexlist(RANK)
$:'' if RANK == 0 else ','.join(['i'+str(n) for n in range(1,RANK + 1)])
#:enddef indexlist
#:set ALL_TYPES = ['real','real', 'integer', 'integer']
#:set ALL_PRECISIONS = ['real32', 'real64', 'int32', 'int64']
#:set TYPE_PREC = list(zip(ALL_TYPES, ALL_PRECISIONS))
#:set REAL_PRECISIONS = ['real32', 'real64']
#:set INT_PRECISIONS = ['int32', 'int64']
#:set OPERATORS = ['<', '>']
#:set ALL_OPERATOR_NAMES = ['equal', 'less', 'greater']
#:set OPERATOR_NAMES = ['less', 'greater']
#:set OPS_NAMES = list(zip(OPERATORS, OPERATOR_NAMES))
#:set MAX_RANK = 6
#:set RANKS = range(0,MAX_RANK+1)
#:set ACTUAL_RANK_PAIR = [(a,r*a) for a in RANKS for r in (0,1)][1:]
module caf_testing
  !< Summary: Provide a simple coarray-aware assertion module to be used in unit tests
  !< Date: 11/09/2020
  !< Author: Sam Miller
  use iso_fortran_env
  implicit none (type, external)

  private
  public :: assert_equal, assert_less, assert_greater

  #:for OP in ALL_OPERATOR_NAMES
  interface assert_${OP}$
    #:for PREC in REAL_PRECISIONS
    #:for ACTUAL_RANK, RANK in ACTUAL_RANK_PAIR
    #:if OP == 'equal'
    module procedure assert_r${RANK}$_equal_r${ACTUAL_RANK}$_${PREC}$
    #:else
    module procedure assert_r${RANK}$_${OP}$_r${ACTUAL_RANK}$_${PREC}$
    #:endif
    #:endfor
    #:endfor

    #:for PREC in INT_PRECISIONS
    #:for ACTUAL_RANK, RANK in ACTUAL_RANK_PAIR
    #:if OP == 'equal'
    module procedure assert_r${RANK}$_equal_r${ACTUAL_RANK}$_${PREC}$
    #:else
    module procedure assert_r${RANK}$_${OP}$_r${ACTUAL_RANK}$_${PREC}$
    #:endif
    #:endfor
    #:endfor
    
    #:for ACTUAL_RANK, RANK in ACTUAL_RANK_PAIR
    #:if OP == 'equal'
    module procedure assert_r${RANK}$_equal_r${ACTUAL_RANK}$_logical
    #:endif
    #:endfor
    #:if OP == 'equal'
    module procedure assert_equal_str
    #:endif
  end interface assert_${OP}$

  #:endfor

contains

! -------------------------------------------------------
! Character assertions
! -------------------------------------------------------
subroutine assert_equal_str(desired, actual, compare_trimed, file, line)
  character(len=*), intent(in) :: desired
  character(len=*), intent(in) :: actual
  character(len=*), intent(in) :: file
  integer, intent(in) :: line
  logical, optional :: compare_trimed  !< trim the strings before compare?

  logical :: do_trim 
  logical :: correct
  
  correct = .false.
  do_trim = .true. !< defaults to true
  if (present(compare_trimed)) do_trim = compare_trimed

  if (do_trim) then
    if (len_trim(desired) /= len_trim(actual)) then
      write(*,'((3(a), i0))') "Assertion Failure (=): len_trim(desired) /= len_trim(actual) in ", trim(file), ":", line
      error stop "Test failure"
    end if

    if (trim(desired) == trim(actual)) correct = .true.
  else
    if (len(desired) /= len(actual)) then
      write(*,'((3(a), i0))') "Assertion Failure (=): len(desired) /= len(actual) in ", trim(file), ":", line
      error stop "Test failure"
    end if

    if (desired == actual) correct = .true.
  endif

  if (.not. correct) then
    write(*,'((3(a), i0))') "Assertion Failure (=) in ", trim(file), ":", line
    write(*,'(a,i0)') "Image: ", this_image()
    if (do_trim) then
      write(*,'(3(a))') "Desired Value: '", trim(desired), "'"
      write(*,'(3(a))') "Actual Value:  '", trim(actual), "'"
    else
      write(*,'(3(a))') "Desired Value: '", desired, "'"
      write(*,'(3(a))') "Actual Value:  '", actual, "'"
    endif
    error stop "Test failure"
  end if

end subroutine

! -------------------------------------------------------
! Real (=) assertions
! -------------------------------------------------------
#:for PREC in REAL_PRECISIONS
#:for ACTUAL_RANK, RANK in ACTUAL_RANK_PAIR
  subroutine assert_r${RANK}$_equal_r${ACTUAL_RANK}$_${PREC}$(desired, actual, tol, file, line)
    real(${PREC}$), intent(in) :: desired${ranksuffix(RANK)}$
    real(${PREC}$), intent(in) :: actual${ranksuffix(ACTUAL_RANK)}$
    real(${PREC}$), intent(in), optional :: tol !< Optional user-specified floating point tolerance
    real(${PREC}$) :: eps !< Floating point epsilon
    character(len=*), intent(in) :: file
    integer, intent(in) :: line
    #:set LOOP_INDEX_NAMES = ['i'+str(n) for n in range(1,ACTUAL_RANK + 1)]
    #:set LOOP_INDEX_NUMS = [n for n in range(1,ACTUAL_RANK + 1)]
    #:if ACTUAL_RANK > 0
    integer :: ${indexlist(ACTUAL_RANK)}$  !< loop indices to check assertions elementwise
    #:endif

    logical :: correct
    correct = .false.
    #:if RANK > 0
    if (size(desired) /= size(actual)) then
      write(*,'((3(a), i0))') "Assertion Failure (=): size(desired) /= size(actual) in ", trim(file), ":", line
      error stop "Test failure"
    end if
    #:endif

    if (present(tol)) then
      eps = tol
    else
      eps = epsilon(1.0_${PREC}$)
    end if

  #:if ACTUAL_RANK == 0
    if(abs(desired - actual) < eps) correct = .true.

    if(.not. correct) then
      write(*,'((3(a), i0))') "Assertion Failure (=) in ", trim(file), ":", line
      write(*,'(a,i0)') "Image: ", this_image()
      write(*,'(a,es16.6)') "Desired Value: ", desired
      write(*,'(a,es16.6)') "Actual Value:  ", actual
      write(*,'(a,es16.6)') "Difference:    ", desired - actual
      write(*,'(a,es16.6)') "Epsilon:       ", eps
      error stop "Test failure"
    end if
  #:else
    if (all(abs(desired - actual) < eps)) correct = .true.

    ! If all() is not correct, then loop through and figure out where
    if(.not. correct) then
      #:if ACTUAL_RANK > 0
      #:for IDX, NAME in enumerate(reversed(LOOP_INDEX_NAMES))
      do ${NAME}$ = lbound(actual, dim=${ACTUAL_RANK-IDX}$), ubound(actual, dim=${ACTUAL_RANK-IDX}$)
      #:endfor
        if(abs(desired${rankindex(RANK)}$ - actual${rankindex(ACTUAL_RANK)}$) > eps) then
            write(*,'((3(a), i0))') "Assertion Failure (=) in ", trim(file), ":", line
            write(*,'(a,i0)')          "Image:         ", this_image()
            write(*,'(a,es16.6)')      "Desired Value: ", desired${rankindex(RANK)}$
            write(*,'(a,es16.6)')      "Actual Value:  ", actual${rankindex(ACTUAL_RANK)}$
            write(*,'(a,es16.6)')      "Difference:    ", desired${rankindex(RANK)}$ - actual${rankindex(ACTUAL_RANK)}$
            write(*, '(a,10(i0, 1x))') "At index:      ", ${indexlist(ACTUAL_RANK)}$
            write(*,'(a,es16.6)')      "Epsilon:       ", eps
            error stop "Test failure"
        end if
      #:for IDX in LOOP_INDEX_NAMES
      end do
      #:endfor
      #:endif
    end if
  #:endif
  end subroutine 
  
#:endfor
#:endfor

! -------------------------------------------------------
! Integer (=) assertions
! -------------------------------------------------------
#:for PREC in INT_PRECISIONS
#:for ACTUAL_RANK, RANK in ACTUAL_RANK_PAIR
  subroutine assert_r${RANK}$_equal_r${ACTUAL_RANK}$_${PREC}$(desired, actual, file, line)
    integer(${PREC}$), intent(in) :: desired${ranksuffix(RANK)}$
    integer(${PREC}$), intent(in) :: actual${ranksuffix(ACTUAL_RANK)}$
    character(len=*), intent(in) :: file
    integer, intent(in) :: line
    #:set LOOP_INDEX_NAMES = ['i'+str(n) for n in range(1,ACTUAL_RANK + 1)]
    #:set LOOP_INDEX_NUMS = [n for n in range(1,ACTUAL_RANK + 1)]
    #:if ACTUAL_RANK > 0
    integer :: ${indexlist(ACTUAL_RANK)}$ !< loop indices to check assertions elementwise
    #:endif

    logical :: correct
    correct = .false.

    #:if RANK > 0
    if (size(desired) /= size(actual)) then
      write(*,'((3(a), i0))') "Assertion Failure (=): size(desired) /= size(actual) in ", trim(file), ":", line
      error stop "Test failure"
    end if
    #:endif
    #:if ACTUAL_RANK == 0
    if(desired == actual) correct = .true.

    if(.not. correct) then
      write(*,'((3(a), i0))') "Assertion Failure (=) in ", trim(file), ":", line
      write(*,'(a,i0)') "Image: ", this_image()
      write(*,'(a,i0)') "Desired Value: ", desired
      write(*,'(a,i0)') "Actual Value:  ", actual
      write(*,'(a,i0)') "Difference:    ", desired - actual
      error stop "Test failure"
    end if
    #:else
    if (all(desired == actual)) correct = .true.

    ! If all() is not correct, then loop through and figure out where
    if(.not. correct) then
      #:if ACTUAL_RANK > 0
      #:for IDX, NAME in enumerate(reversed(LOOP_INDEX_NAMES))
      do ${NAME}$ = lbound(actual, dim=${ACTUAL_RANK-IDX}$), ubound(actual, dim=${ACTUAL_RANK-IDX}$)
      #:endfor
        if(desired${rankindex(RANK)}$ /= actual${rankindex(ACTUAL_RANK)}$) then
            write(*,'((3(a), i0))') "Assertion Failure (=) in ", trim(file), ":", line
            write(*,'(a,i0)')       "Image:         ", this_image()
            write(*,'(a,i0)')       "Desired Value: ", desired${rankindex(RANK)}$
            write(*,'(a,i0)')       "Actual Value:  ", actual${rankindex(ACTUAL_RANK)}$
            write(*,'(a,i0)')       "Difference:    ", desired${rankindex(RANK)}$ - actual${rankindex(ACTUAL_RANK)}$
            write(*, '(a,10(i0, 1x))') "At index:      ", ${indexlist(ACTUAL_RANK)}$
            error stop "Test failure"
        end if
      #:for IDX in LOOP_INDEX_NAMES
      end do
      #:endfor
      #:endif
    end if
    #:endif
  end subroutine 

#:endfor
#:endfor

! -------------------------------------------------------
! Logical assertions
! -------------------------------------------------------
#:for ACTUAL_RANK, RANK in ACTUAL_RANK_PAIR
  subroutine assert_r${RANK}$_equal_r${ACTUAL_RANK}$_logical(desired, actual, file, line)
    logical, intent(in) :: desired${ranksuffix(RANK)}$
    logical, intent(in) :: actual${ranksuffix(ACTUAL_RANK)}$
    character(len=*), intent(in) :: file
    integer, intent(in) :: line
    #:set LOOP_INDEX_NAMES = ['i'+str(n) for n in range(1,ACTUAL_RANK + 1)]
    #:set LOOP_INDEX_NUMS = [n for n in range(1,ACTUAL_RANK + 1)]
    #:if ACTUAL_RANK > 0
    integer :: ${indexlist(ACTUAL_RANK)}$ !< loop indices to check assertions elementwise
    #:endif
    logical :: correct
    correct = .false.

    #:if RANK > 0
    if (size(desired) /= size(actual)) then
      write(*,'((3(a), i0))') "Assertion Failure (=): size(desired) /= size(actual) in ", trim(file), ":", line
      error stop "Test failure"
    end if
    #:endif
    #:if ACTUAL_RANK == 0
    if(desired .eqv. actual) correct = .true.

    if(.not. correct) then
      write(*,'((3(a), i0))') "Assertion Failure (=) in ", trim(file), ":", line
      write(*,'(a,i0)') "Image: ", this_image()
      write(*,'(a,l2)') "Desired Value: ", desired
      write(*,'(a,l2)') "Actual Value:  ", actual
      error stop "Test failure"
    end if
    #:else

    if (all(desired .eqv. actual)) correct = .true.

    ! If all() is not correct, then loop through and figure out where
    if(.not. correct) then
      #:if ACTUAL_RANK > 0
      #:for IDX, NAME in enumerate(reversed(LOOP_INDEX_NAMES))
      do ${NAME}$ = lbound(actual, dim=${ACTUAL_RANK-IDX}$), ubound(actual, dim=${ACTUAL_RANK-IDX}$)
      #:endfor
        if(desired${rankindex(RANK)}$ .neqv. actual${rankindex(ACTUAL_RANK)}$) then
          write(*,'((3(a), i0))') "Assertion Failure (=) in ", trim(file), ":", line
            write(*,'(a,i0)')     "Image:         ", this_image()
            write(*,'(a,l2)')      "Desired Value: ", desired${rankindex(RANK)}$
            write(*,'(a,l2)')      "Actual Value:  ", actual${rankindex(ACTUAL_RANK)}$
            write(*, '(a,10(i0, 1x))') "At index:      ", ${indexlist(ACTUAL_RANK)}$
            error stop "Test failure"
        end if
      #:for IDX in LOOP_INDEX_NAMES
      end do
      #:endfor
      #:endif
    end if
    #:endif
  end subroutine 
  
#:endfor
! -------------------------------------------------------
! < and > assertions for Reals and Integers
! -------------------------------------------------------
#:for OP, OP_NAMES in OPS_NAMES
#:for T, PREC in TYPE_PREC
#:for ACTUAL_RANK, RANK in ACTUAL_RANK_PAIR
  subroutine assert_r${RANK}$_${OP_NAMES}$_r${ACTUAL_RANK}$_${PREC}$(desired, actual, file, line)
    ${T}$(${PREC}$), intent(in) :: desired${ranksuffix(RANK)}$
    ${T}$(${PREC}$), intent(in) :: actual${ranksuffix(ACTUAL_RANK)}$
    character(len=*), intent(in) :: file
    integer, intent(in) :: line
    logical :: correct
    #:set LOOP_INDEX_NAMES = ['i'+str(n) for n in range(1,ACTUAL_RANK + 1)]
    #:set LOOP_INDEX_NUMS = [n for n in range(1,ACTUAL_RANK + 1)]
    #:if ACTUAL_RANK > 0
    integer :: ${indexlist(ACTUAL_RANK)}$  !< loop indices to check assertions elementwise
    #:endif
    correct = .false.

    #:if RANK > 0
    if (size(desired) /= size(actual)) then
      write(*,'((3(a), i0))') "Assertion Failure (=): size(desired) /= size(actual) in ", trim(file), ":", line
      error stop "Test failure"
    end if
    #:endif

    #:if ACTUAL_RANK == 0
    if(desired ${OP}$ actual) correct = .true.

    if(.not. correct) then
      write(*,'((3(a), i0))') "Assertion Failure (${OP}$) in ", trim(file), ":", line
      write(*,'(a,i0)') "Image: ", this_image()
      write(*,'(a,i0)') "Desired Value: ", desired
      write(*,'(a,i0)') "Actual Value:  ", actual
      error stop "Test failure"
    end if
    #:else
    if (all(desired ${OP}$ actual)) correct = .true.
    ! If all() is not correct, then loop through and figure out where
    if(.not. correct) then
      #:if ACTUAL_RANK > 0
      #:for IDX, NAME in enumerate(reversed(LOOP_INDEX_NAMES))
      do ${NAME}$ = lbound(actual, dim=${ACTUAL_RANK-IDX}$), ubound(actual, dim=${ACTUAL_RANK-IDX}$)
      #:endfor
        if(.not. (desired${rankindex(RANK)}$ ${OP}$ actual${rankindex(ACTUAL_RANK)}$)) then
            write(*,'((3(a), i0))')    "Assertion Failure (${OP}$) in ", trim(file), ":", line
            write(*,*)                 "Image:         ", this_image()
            write(*,*)                 "Desired Value: ", desired${rankindex(RANK)}$
            write(*,*)                 "Actual Value:  ", actual${rankindex(ACTUAL_RANK)}$
            write(*, '(a,10(i0, 1x))') "At index:      ", ${indexlist(ACTUAL_RANK)}$
            error stop "Test failure"
        end if
      #:for IDX in LOOP_INDEX_NAMES
      end do
      #:endfor
      #:endif
    end if

    #:endif

    if(.not. correct) then
      write(*,*) "assert_${OP_NAMES}$ (${OP}$) on image ", this_image(), " failed. desired= ", desired, " actual= ", actual
      error stop "Test failure"
    end if

  end subroutine

#:endfor
#:endfor
#:endfor
end module caf_testing