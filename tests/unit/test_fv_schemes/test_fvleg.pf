module test_cato
  use, intrinsic :: iso_fortran_env, only: ik => int32, rk => real64
  use mod_cato
  use mod_input, only: input_t
  use mod_regular_2d_grid, only: regular_2d_grid_t
  use mod_grid, only: grid_t
  use funit

  implicit none

  integer(ik), parameter :: ni_nodes = 5
  integer(ik), parameter :: nj_nodes = 3
  integer(ik), parameter :: ni_cells = ni_nodes - 1
  integer(ik), parameter :: nj_cells = nj_nodes - 1
  real(rk), parameter :: xmin = -2.0_rk
  real(rk), parameter :: xmax = 2.0_rk
  real(rk), parameter :: ymin = -2.0_rk
  real(rk), parameter :: ymax = 2.0_rk
  integer(ik) :: alloc_stat

  real(rk), parameter :: init_density = 1.0_rk
  real(rk), parameter :: init_x_velocity = -2.0_rk
  real(rk), parameter :: init_y_velocity = 3.0_rk
  real(rk), parameter :: init_pressure = 4.0_rk

contains

  ! @test
  ! subroutine test_from_hdf5()
  !   class(input_t), allocatable :: input
  !   type(cato_t) :: cato

  !   input = input_t(reconstruction_type='piecewise_linear', &
  !                   slope_limiter='upwind', &
  !                   ni_nodes=ni_nodes, nj_nodes=nj_nodes, &
  !                   read_init_cond_from_file=.true., &
  !                   initial_condition_file='simple.h5', &
  !                   time_integration_strategy='rk2', &
  !                   plus_x_bc='periodic', plus_y_bc='periodic', &
  !                   minus_x_bc='periodic', minus_y_bc='periodic', &
  !                   xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax)

  !   call cato%initialize(input)
  !   @assertEqual(init_density, cato%conserved_vars(1, :, :))
  !   @assertEqual(init_x_velocity, cato%conserved_vars(2, :, :))
  !   @assertEqual(init_y_velocity, cato%conserved_vars(3, :, :))
  !   @assertEqual(init_pressure, cato%conserved_vars(4, :, :))
  !   call test_cato_dimensions(cato)
  ! end subroutine

  ! @test
  ! subroutine test_from_ini()
  !   class(input_t), allocatable :: input
  !   type(cato_t) :: cato

  !   allocate(input_t :: input)
  !   input = input_t(reconstruction_type='piecewise_linear', &
  !                   slope_limiter='upwind', &
  !                   ni_nodes=ni_nodes, nj_nodes=nj_nodes, &
  !                   read_init_cond_from_file=.false., &
  !                   time_integration_strategy='rk2', &
  !                   plus_x_bc='periodic', plus_y_bc='periodic', &
  !                   minus_x_bc='periodic', minus_y_bc='periodic', &
  !                   xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax, &
  !                   init_density=init_density, &
  !                   init_x_velocity=init_x_velocity, &
  !                   init_y_velocity=init_y_velocity, &
  !                   init_pressure=init_pressure)

  !   call cato%initialize(input)
  !   @assertEqual(init_density, cato%conserved_vars(1, :, :))
  !   @assertEqual(init_x_velocity, cato%conserved_vars(2, :, :))
  !   @assertEqual(init_y_velocity, cato%conserved_vars(3, :, :))
  !   @assertEqual(init_pressure, cato%conserved_vars(4, :, :))
  !   call test_cato_dimensions(cato)
  ! end subroutine

  subroutine test_cato_dimensions(cato)
    type(cato_t), intent(in) :: cato

    ! Check shape and bounds
    ! Cell-valued quantities (the +2 is to accound for boundary cells)
    @assertEqual([4, ni_cells + 2, nj_cells + 2], shape(cato%conserved_vars))
    @assertEqual([1, 0, 0], lbound(cato%conserved_vars))
    @assertEqual([4, ni_cells + 1, nj_cells + 1], ubound(cato%conserved_vars))

    @assertEqual([4, 4, 2, ni_cells + 2, nj_cells + 2], shape(cato%reconstructed_state))
    @assertEqual([1, 1, 1, 0, 0], lbound(cato%reconstructed_state))
    @assertEqual([4, 4, 2, ni_cells + 1, nj_cells + 1], ubound(cato%reconstructed_state))

    ! Node-valued quantites
    ! Note: these do not have ghost/boundary values, they inherit their state
    ! using the conserved values array (which does have boundary cells)
    @assertEqual([4, ni_nodes, nj_nodes], shape(cato%evolved_corner_state))
    @assertEqual([1, 1, 1], lbound(cato%evolved_corner_state))
    @assertEqual([4, ni_nodes, nj_nodes], ubound(cato%evolved_corner_state))

    @assertEqual([4, ni_nodes, nj_nodes], shape(cato%evolved_downup_midpoints_state))
    @assertEqual([1, 1, 1], lbound(cato%evolved_downup_midpoints_state))
    @assertEqual([4, ni_nodes, nj_nodes], ubound(cato%evolved_downup_midpoints_state))

    @assertEqual([4, ni_nodes, nj_nodes], shape(cato%evolved_leftright_midpoints_state))
    @assertEqual([1, 1, 1], lbound(cato%evolved_leftright_midpoints_state))
    @assertEqual([4, ni_nodes, nj_nodes], ubound(cato%evolved_leftright_midpoints_state))

    @assertEqual([4, ni_nodes, nj_nodes], shape(cato%corner_reference_state))
    @assertEqual([1, 1, 1], lbound(cato%corner_reference_state))
    @assertEqual([4, ni_nodes, nj_nodes], ubound(cato%corner_reference_state))

    @assertEqual([4, ni_nodes, nj_nodes], shape(cato%downup_midpoints_reference_state))
    @assertEqual([1, 1, 1], lbound(cato%downup_midpoints_reference_state))
    @assertEqual([4, ni_nodes, nj_nodes], ubound(cato%downup_midpoints_reference_state))

    @assertEqual([4, ni_nodes, nj_nodes], shape(cato%leftright_midpoints_reference_state))
    @assertEqual([1, 1, 1], lbound(cato%leftright_midpoints_reference_state))
    @assertEqual([4, ni_nodes, nj_nodes], ubound(cato%leftright_midpoints_reference_state))

  end subroutine test_cato_dimensions

  @test
  subroutine test_operators()

    type(input_t) :: input
    class(cato_t), pointer :: cato_a, cato_b, cato_c
    real(rk), dimension(:, :, :), allocatable :: conserved_vars

    integer(ik) :: ini
    character(len=32) :: ini_filename

    write(*, *) "Running test for test_grid.test_operators()"

    ini_filename = 'test_cato_test_operators.ini'

    open(newunit=ini, file=trim(ini_filename), status='replace')

    write(ini, *) "[general]"
    write(ini, *) "title='basic'"
    write(ini, *) "[time]"
    write(ini, *) "max_time = 0.2"
    write(ini, *) "integration_strategy='rk2'"
    write(ini, *) "contour_interval_dt = 0.1"
    write(ini, *) "initial_delta_t = 1e-2"
    write(ini, *) "[grid]"
    write(ini, *) "grid_type = '2d_regular'"
    write(ini, *) "ni_nodes=5"
    write(ini, *) "xmin=-5"
    write(ini, *) "xmax=5"
    write(ini, *) "nj_nodes=10"
    write(ini, *) "ymin=-5"
    write(ini, *) "ymax=10"
    write(ini, *) "[initial_conditions]"
    write(ini, *) "read_from_file = False"
    write(ini, *) "init_density=1"
    write(ini, *) "init_x_velocity=-2"
    write(ini, *) "init_y_velocity=3"
    write(ini, *) "init_pressure=4"
    write(ini, *) "[boundary_conditions]"
    write(ini, *) "plus_x = 'periodic'"
    write(ini, *) "minus_x = 'periodic'"
    write(ini, *) "plus_y = 'periodic'"
    write(ini, *) "minus_y = 'periodic'"
    write(ini, *) "[scheme]"
    write(ini, *) "tau=1e-2"
    write(ini, *) "reconstruction_type = 'piecewise_linear'"
    write(ini, *) "slope_limiter = 'upwind'"
    write(ini, *) "[physics]"
    write(ini, *) "polytropic_index = 1.6666666667"
    write(ini, *) "[io]"
    write(ini, *) "contour_format = 'xdmf'"

    ! write(ini, *) "[general]"
    ! write(ini, *) "title='simple ini input'"
    ! write(ini, *) "[time]"
    ! write(ini, *) "max_time = 0.2"
    ! write(ini, *) "integration_strategy='rk2'"
    ! write(ini, *) "contour_interval_dt = 0.1"
    ! write(ini, *) "initial_delta_t = 1e-2"
    ! write(ini, *) "[grid]"
    ! write(ini, *) "xmin=", xmin
    ! write(ini, *) "xmax=", xmax
    ! write(ini, *) "ni_nodes=", ni_nodes
    ! write(ini, *) "nj_nodes=", nj_nodes
    ! write(ini, *) "ymin=", ymin
    ! write(ini, *) "ymax=", ymax
    ! write(ini, *) "[physics]"
    ! write(ini, *) "polytropic_index=1.6"
    ! write(ini, *) "[initial_conditions]"
    ! write(ini, *) "read_from_file = false"
    ! ! write(ini, *) "initial_condition_file = 'double_shear.h5'"
    ! write(ini, *) "init_density=", init_density
    ! write(ini, *) "init_x_velocity=", init_x_velocity
    ! write(ini, *) "init_y_velocity=", init_y_velocity
    ! write(ini, *) "init_pressure=", init_pressure
    ! write(ini, *) "[boundary_conditions]"
    ! write(ini, *) "plus_x = 'periodic'"
    ! write(ini, *) "minus_x = 'periodic'"
    ! write(ini, *) "plus_y = 'periodic'"
    ! write(ini, *) "minus_y = 'periodic'"
    ! write(ini, *) "[scheme]"
    ! write(ini, *) "tau = '1e-2'"
    ! write(ini, *) "reconstruction_type = 'piecewise_linear'"
    ! write(ini, *) "slope_limiter = 'upwind'"
    ! write(ini, *) "[io]"
    ! write(ini, *) "contour_format = 'xdmf'"
    close(ini)

    call input%read_from_ini(ini_filename)
    cato_a => new_cato(input)
    cato_b => new_cato(input)
    cato_c => new_cato(input)

    ! ! Make a dummy U vector to play with
    allocate(conserved_vars, mold=cato_a%conserved_vars)

    ! cato_t * real
    print *, 'Testing cato_t * real'
    conserved_vars = cato_a%conserved_vars * 2.0_rk
    cato_b = cato_a * 2.0_rk
    @assertEqual(conserved_vars, cato_b%conserved_vars)

    ! real * cato_t
    print *, 'real * Testing cato_t'
    conserved_vars = cato_a%conserved_vars * 2.0_rk
    cato_b = 2.0_rk * cato_a
    @assertEqual(conserved_vars, cato_b%conserved_vars)

    ! ! (-) operator
    ! cato_b = cato_a - 3.0_rk
    ! conserved_vars = cato_a%conserved_vars - 3.0_rk
    ! @assertEqual(conserved_vars, cato_b%conserved_vars)

    ! ! (+) operator
    ! cato_b = cato_a + 4.0_rk
    ! conserved_vars = cato_a%conserved_vars - 4.0_rk
    ! @assertEqual(conserved_vars, cato_b%conserved_vars)

    ! (=) and (+) between same types
    print *, 'Testing cato_t + cato_t'
    cato_c = cato_a + cato_b
    conserved_vars = cato_a%conserved_vars + cato_b%conserved_vars
    @assertEqual(conserved_vars, cato_c%conserved_vars)

  end subroutine test_operators

end module test_cato
