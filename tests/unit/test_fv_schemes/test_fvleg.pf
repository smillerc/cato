module test_fvleg
  use iso_fortran_env, only : ik => int32, rk => real64
  use mod_fvleg, only : fvleg_t, new_fvleg
  use mod_input, only : input_t
  use mod_regular_2d_grid, only : regular_2d_grid_t
  use mod_grid, only : grid_t
  use funit

  implicit none

contains

  @test
  subroutine test_fvleg_operators()

    class(input_t), allocatable :: input
    type(fvleg_t) :: fvleg_a , fvleg_b, fvleg_c
    real(rk), dimension(:, :, :), allocatable :: conserved_vars

    integer(ik) :: ni_nodes, nj_nodes
    integer(ik) :: ni_cells, nj_cells
    allocate(input_t :: input)

    ni_nodes = 5
    nj_nodes = 3
    ni_cells = ni_nodes - 1
    nj_cells = nj_nodes - 1

    call input%initialize(ni=ni_nodes, nj=nj_nodes, &
                          xmin=-2.0_rk, xmax=2.0_rk, ymin=-2.0_rk, ymax=2.0_rk)

    call fvleg_a%initialize(input)
    fvleg_a%conserved_vars = 1.0_rk

    call fvleg_b%initialize(input)
    fvleg_a%conserved_vars = 2.0_rk

    ! Make a dummy U vector to play with
    allocate(conserved_vars, mold=fvleg_a%conserved_vars)
    conserved_vars = 4.0_rk

    ! Cell-valued quantities
    @assertEqual([ni_cells,nj_cells], shape(fvleg_a%grid%cell_volume))
    @assertEqual([4,ni_cells,nj_cells], shape(fvleg_a%conserved_vars))
    @assertEqual([4, 4, 2, ni_cells, nj_cells], shape(fvleg_a%reconstructed_state))

    ! Node-valued quantites
    @assertEqual([4, ni_nodes, nj_nodes], shape(fvleg_a%evolved_corner_state))
    @assertEqual([4, ni_nodes, nj_nodes], shape(fvleg_a%evolved_downup_midpoints_state))
    @assertEqual([4, ni_nodes, nj_nodes], shape(fvleg_a%evolved_leftright_midpoints_state))
    @assertEqual([4, ni_nodes, nj_nodes], shape(fvleg_a%corner_reference_state))
    @assertEqual([4, ni_nodes, nj_nodes], shape(fvleg_a%downup_midpoints_reference_state))
    @assertEqual([4, ni_nodes, nj_nodes], shape(fvleg_a%leftright_midpoints_reference_state))

    fvleg_c = fvleg_a + fvleg_b
    ! Check the + operator
    @assertEqual(3.0_rk, fvleg_c%conserved_vars)

  end subroutine

end module test_fvleg
